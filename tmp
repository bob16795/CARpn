; ModuleID = 'Context'
source_filename = "Context"

%Vec2 = type { float, float }
%Vec3 = type { float, float, float }
%Mat4 = type { [4 x [4 x float]] }
%GFXContext = type { ptr addrspace(5), %Color, %IVec2 }
%Color = type { float, float, float, float }
%IVec2 = type { i32, i32 }
%Shader = type { i32 }
%ShaderFile = type { ptr addrspace(5), i32, i32 }
%Texture = type { i32, %IVec2 }
%Verts = type { ptr addrspace(5), i32 }
%Vert = type { float, float, float, float, float, float, float, float, float }
%Drawer = type { ptr addrspace(5), ptr addrspace(5), ptr addrspace(5) }
%SBQueueEntry = type { i1, i64, ptr addrspace(5), ptr addrspace(5) }
%SBQueue = type { ptr addrspace(5), i32 }
%SpriteBatch = type { ptr addrspace(5), ptr addrspace(5), ptr addrspace(5), i32, %Vec2 }
%SBContext = type { ptr addrspace(5) }
%Sprite = type { %Vec2, %Vec2 }

@str = global [20 x i8] c"Could not init glfw\00"
@str.1 = global [11 x i8] c"CARpn Test\00"
@str.2 = global [11 x i8] c"projection\00"
@str.3 = global [6 x i8] c"less\0A\00"
@str.4 = global [325 x i8] c"#version 330 core\0Alayout (location = 0) in vec3 aVertex;\0Alayout (location = 1) in vec2 aTexCoords;\0Alayout (location = 2) in vec4 aColor;\0Auniform mat4 projection;\0Aout vec2 texCoords;\0Aout vec4 tintColor;\0Avoid main()\0A{\0A    gl_Position = projection * vec4(aVertex.xyz, 1.0);\0A    texCoords = aTexCoords;\0A    tintColor = aColor;\0A}\00"
@str.5 = global [150 x i8] c"#version 330 core\0A\0Ain vec2 texCoords;\0Ain vec4 tintColor;\0A\0Aout vec4 color;\0A\0Auniform sampler2D tex;\0A\0Avoid main() {\0A  color = texture(tex, texCoords);\0A}\00"
@str.6 = global [8 x i8] c"lol.png\00"
@str.7 = global [5 x i8] c"done\00"

declare void @printf(ptr addrspace(5))

declare ptr addrspace(5) @malloc(i32)

declare ptr addrspace(5) @calloc(i32, i32)

declare ptr addrspace(5) @realloc(ptr addrspace(5), i32)

declare void @free(ptr addrspace(5))

declare void @exit(i32)

define void @mem.cpy(ptr addrspace(5) %0, ptr addrspace(5) %1, i32 %2) {
entry:
  ret void
}

define i1 @mem.eql(ptr addrspace(5) %0, ptr addrspace(5) %1, i32 %2) {
entry:
  %a = alloca ptr addrspace(5), align 8
  %b = alloca ptr addrspace(5), align 8
  %size = alloca i32, align 4
  store i32 %2, ptr %size, align 4
  store ptr addrspace(5) %1, ptr %a, align 8
  store ptr addrspace(5) %0, ptr %b, align 8
  %readtmp = load ptr addrspace(5), ptr %a, align 8
  %readtmp1 = load ptr addrspace(5), ptr %b, align 8
  %neqtmp = icmp eq ptr addrspace(5) %readtmp1, %readtmp
  %ifcond = icmp ne i1 %neqtmp, false
  br i1 %ifcond, label %ifbody, label %ifmerge

ifbody:                                           ; preds = %entry
  ret i1 true
  br label %ifmerge

ifmerge:                                          ; preds = %ifbody, %entry
  br label %dobody

dobody:                                           ; preds = %ifmerge12, %ifmerge
  %readtmp2 = load i32, ptr %size, align 4
  %subtmp = sub i32 %readtmp2, 1
  store i32 %subtmp, ptr %size, align 4
  %readtmp3 = load ptr addrspace(5), ptr %a, align 8
  %readtmp4 = load i32, ptr %size, align 4
  %idxtmp = getelementptr inbounds [1 x i8], ptr addrspace(5) %readtmp3, i32 %readtmp4
  %readtmp5 = load i8, ptr addrspace(5) %idxtmp, align 1
  %readtmp6 = load ptr addrspace(5), ptr %b, align 8
  %readtmp7 = load i32, ptr %size, align 4
  %idxtmp8 = getelementptr inbounds [1 x i8], ptr addrspace(5) %readtmp6, i32 %readtmp7
  %readtmp9 = load i8, ptr addrspace(5) %idxtmp8, align 1
  %eqtmp = icmp ne i8 %readtmp9, %readtmp5
  %ifcond10 = icmp ne i1 %eqtmp, false
  br i1 %ifcond10, label %ifbody11, label %ifmerge12

domerge:                                          ; preds = %ifmerge12
  ret i1 true

ifbody11:                                         ; preds = %dobody
  ret i1 false
  br label %ifmerge12

ifmerge12:                                        ; preds = %ifbody11, %dobody
  %readtmp13 = load i32, ptr %size, align 4
  %lttmp = icmp ugt i32 %readtmp13, 0
  %docond = icmp ne i1 %lttmp, false
  br i1 %docond, label %dobody, label %domerge
}

define ptr addrspace(5) @mem.add(ptr addrspace(5) %0, i64 %1) {
entry:
  %addtmp = add i64 %1, ptr addrspace(5) %0
  ret i64 %addtmp
}

define i64 @Hash.get(ptr addrspace(5) %0, i32 %1) {
entry:
  %result = alloca i64, align 8
  %idx = alloca i32, align 4
  %str = alloca ptr addrspace(5), align 8
  %c = alloca i64, align 8
  %neqtmp = icmp eq i32 0, %1
  %ifcond = icmp ne i1 %neqtmp, false
  br i1 %ifcond, label %ifbody, label %ifmerge

ifbody:                                           ; preds = %entry
  ret i64 0
  br label %ifmerge

ifmerge:                                          ; preds = %ifbody, %entry
  store i32 %1, ptr %idx, align 4
  store ptr addrspace(5) %0, ptr %str, align 8
  store i64 5381, ptr %result, align 4
  br label %dobody

dobody:                                           ; preds = %dobody, %ifmerge
  %readtmp = load ptr addrspace(5), ptr %str, align 8
  %readtmp1 = load i32, ptr %idx, align 4
  %calltmp = call ptr addrspace(5) @mem.add(ptr addrspace(5) %readtmp, i32 %readtmp1)
  %readtmp2 = load i8, ptr addrspace(5) %calltmp, align 1
  store i8 %readtmp2, ptr %c, align 1
  %readtmp3 = load i64, ptr %result, align 4
  %subtmp = shl i64 %readtmp3, 5
  %readtmp4 = load i64, ptr %result, align 4
  %addtmp = add i64 %subtmp, %readtmp4
  %readtmp5 = load i64, ptr %c, align 4
  %addtmp6 = add i64 %addtmp, %readtmp5
  store i64 %addtmp6, ptr %result, align 4
  %readtmp7 = load i32, ptr %idx, align 4
  %subtmp8 = sub i32 %readtmp7, 1
  store i32 %subtmp8, ptr %idx, align 4
  %readtmp9 = load i32, ptr %idx, align 4
  %lttmp = icmp ugt i32 %readtmp9, 0
  %docond = icmp ne i1 %lttmp, false
  br i1 %docond, label %dobody, label %domerge

domerge:                                          ; preds = %dobody
  %readtmp10 = load i64, ptr %result, align 4
  ret i64 %readtmp10
}

define %Vec2 @Vec2.new(float %0, float %1) {
entry:
  %result = alloca %Vec2, align 8
  %2 = getelementptr inbounds %Vec2, ptr %result, i32 0, i32 1
  store float %1, ptr %2, align 4
  %3 = getelementptr inbounds %Vec2, ptr %result, i32 0, i32 0
  store float %0, ptr %3, align 4
  %readtmp = load %Vec2, ptr %result, align 4
  ret %Vec2 %readtmp
}

declare float @sqrt(float)

define %Vec3 @Vec3.sub(%Vec3 %0, %Vec3 %1) {
entry:
  %result = alloca %Vec3, align 8
  %extracted = extractvalue %Vec3 %0, 0
  %extracted1 = extractvalue %Vec3 %1, 0
  %subtmp = fsub float %extracted, %extracted1
  %2 = getelementptr inbounds %Vec3, ptr %result, i32 0, i32 0
  store float %subtmp, ptr %2, align 4
  %extracted2 = extractvalue %Vec3 %0, 1
  %extracted3 = extractvalue %Vec3 %1, 1
  %subtmp4 = fsub float %extracted2, %extracted3
  %3 = getelementptr inbounds %Vec3, ptr %result, i32 0, i32 1
  store float %subtmp4, ptr %3, align 4
  %extracted5 = extractvalue %Vec3 %0, 2
  %extracted6 = extractvalue %Vec3 %1, 2
  %subtmp7 = fsub float %extracted5, %extracted6
  %4 = getelementptr inbounds %Vec3, ptr %result, i32 0, i32 2
  store float %subtmp7, ptr %4, align 4
  %readtmp = load %Vec3, ptr %result, align 4
  ret %Vec3 %readtmp
}

define float @Vec3.dot(%Vec3 %0, %Vec3 %1) {
entry:
  %result = alloca float, align 4
  store float 0.000000e+00, ptr %result, align 4
  %extracted = extractvalue %Vec3 %0, 0
  %extracted1 = extractvalue %Vec3 %1, 0
  %multmp = fmul float %extracted, %extracted1
  %readtmp = load float, ptr %result, align 4
  %addtmp = fadd float %multmp, %readtmp
  store float %addtmp, ptr %result, align 4
  %extracted2 = extractvalue %Vec3 %0, 1
  %extracted3 = extractvalue %Vec3 %1, 1
  %multmp4 = fmul float %extracted2, %extracted3
  %readtmp5 = load float, ptr %result, align 4
  %addtmp6 = fadd float %multmp4, %readtmp5
  store float %addtmp6, ptr %result, align 4
  %extracted7 = extractvalue %Vec3 %0, 2
  %extracted8 = extractvalue %Vec3 %1, 2
  %multmp9 = fmul float %extracted7, %extracted8
  %readtmp10 = load float, ptr %result, align 4
  %addtmp11 = fadd float %multmp9, %readtmp10
  store float %addtmp11, ptr %result, align 4
  %readtmp12 = load float, ptr %result, align 4
  ret float %readtmp12
}

define %Vec3 @"Vec3.cross\7F\BB\08\7F"(%Vec3 %0, %Vec3 %1) {
entry:
  %result = alloca %Vec3, align 8
  %a = alloca %Vec3, align 8
  %b = alloca %Vec3, align 8
  store %Vec3 %1, ptr %a, align 4
  store %Vec3 %0, ptr %b, align 4
  %2 = getelementptr inbounds %Vec3, ptr %result, i32 0, i32 0
  %readtmp = load %Vec3, ptr %a, align 4
  %extracted = extractvalue %Vec3 %readtmp, 1
  %readtmp1 = load %Vec3, ptr %a, align 4
  %extracted2 = extractvalue %Vec3 %readtmp1, 2
  %multmp = fmul float %extracted, %extracted2
  %readtmp3 = load %Vec3, ptr %b, align 4
  %extracted4 = extractvalue %Vec3 %readtmp3, 2
  %readtmp5 = load %Vec3, ptr %b, align 4
  %extracted6 = extractvalue %Vec3 %readtmp5, 1
  %multmp7 = fmul float %extracted4, %extracted6
  %subtmp = fsub float %multmp, %multmp7
  store float %subtmp, ptr %2, align 4
  %3 = getelementptr inbounds %Vec3, ptr %result, i32 0, i32 1
  %readtmp8 = load %Vec3, ptr %a, align 4
  %extracted9 = extractvalue %Vec3 %readtmp8, 2
  %readtmp10 = load %Vec3, ptr %a, align 4
  %extracted11 = extractvalue %Vec3 %readtmp10, 0
  %multmp12 = fmul float %extracted9, %extracted11
  %readtmp13 = load %Vec3, ptr %b, align 4
  %extracted14 = extractvalue %Vec3 %readtmp13, 0
  %readtmp15 = load %Vec3, ptr %b, align 4
  %extracted16 = extractvalue %Vec3 %readtmp15, 2
  %multmp17 = fmul float %extracted14, %extracted16
  %subtmp18 = fsub float %multmp12, %multmp17
  store float %subtmp18, ptr %3, align 4
  %4 = getelementptr inbounds %Vec3, ptr %result, i32 0, i32 2
  %readtmp19 = load %Vec3, ptr %a, align 4
  %extracted20 = extractvalue %Vec3 %readtmp19, 0
  %readtmp21 = load %Vec3, ptr %a, align 4
  %extracted22 = extractvalue %Vec3 %readtmp21, 1
  %multmp23 = fmul float %extracted20, %extracted22
  %readtmp24 = load %Vec3, ptr %b, align 4
  %extracted25 = extractvalue %Vec3 %readtmp24, 1
  %readtmp26 = load %Vec3, ptr %b, align 4
  %extracted27 = extractvalue %Vec3 %readtmp26, 0
  %multmp28 = fmul float %extracted25, %extracted27
  %subtmp29 = fsub float %multmp23, %multmp28
  store float %subtmp29, ptr %4, align 4
  %readtmp30 = load %Vec3, ptr %result, align 4
  ret %Vec3 %readtmp30
}

define float @Vec3.mag(%Vec3 %0) {
entry:
  %calltmp = call float @Vec3.dot(%Vec3 %0, %Vec3 %0)
  %calltmp1 = call float @sqrt(float %calltmp)
  ret float %calltmp1
}

define %Vec3 @Vec3.normalize(%Vec3 %0) {
entry:
  %m = alloca float, align 4
  %result = alloca %Vec3, align 8
  store %Vec3 %0, ptr %result, align 4
  %readtmp = load %Vec3, ptr %result, align 4
  %calltmp = call float @Vec3.mag(%Vec3 %readtmp)
  store float %calltmp, ptr %m, align 4
  %1 = getelementptr inbounds %Vec3, ptr %result, i32 0, i32 0
  %2 = getelementptr inbounds %Vec3, ptr %result, i32 0, i32 0
  %readtmp1 = load float, ptr %2, align 4
  %readtmp2 = load float, ptr %m, align 4
  %subtmp = fdiv float %readtmp1, %readtmp2
  store float %subtmp, ptr %1, align 4
  %3 = getelementptr inbounds %Vec3, ptr %result, i32 0, i32 1
  %4 = getelementptr inbounds %Vec3, ptr %result, i32 0, i32 1
  %readtmp3 = load float, ptr %4, align 4
  %readtmp4 = load float, ptr %m, align 4
  %subtmp5 = fdiv float %readtmp3, %readtmp4
  store float %subtmp5, ptr %3, align 4
  %5 = getelementptr inbounds %Vec3, ptr %result, i32 0, i32 2
  %6 = getelementptr inbounds %Vec3, ptr %result, i32 0, i32 2
  %readtmp6 = load float, ptr %6, align 4
  %readtmp7 = load float, ptr %m, align 4
  %subtmp8 = fdiv float %readtmp6, %readtmp7
  store float %subtmp8, ptr %5, align 4
  %readtmp9 = load %Vec3, ptr %result, align 4
  ret %Vec3 %readtmp9
}

define %Mat4 @"Mat4.lookAt\BB\08\7F"(%Vec3 %0, %Vec3 %1, %Vec3 %2) {
entry:
  %result = alloca %Mat4, align 8
  %up = alloca %Vec3, align 8
  %center = alloca %Vec3, align 8
  %eye = alloca %Vec3, align 8
  store %Vec3 %2, ptr %up, align 4
  store %Vec3 %1, ptr %center, align 4
  store %Vec3 %0, ptr %eye, align 4
  %f = alloca %Vec3, align 8
  %s = alloca %Vec3, align 8
  %u = alloca %Vec3, align 8
  %readtmp = load %Vec3, ptr %center, align 4
  %readtmp1 = load %Vec3, ptr %eye, align 4
  %calltmp = call %Vec3 @Vec3.sub(%Vec3 %readtmp, %Vec3 %readtmp1)
  %calltmp2 = call %Vec3 @Vec3.normalize(%Vec3 %calltmp)
  store %Vec3 %calltmp2, ptr %f, align 4
  %readtmp3 = load %Vec3, ptr %f, align 4
  %readtmp4 = load %Vec3, ptr %up, align 4
  %calltmp5 = call %Vec3 @"Vec3.cross\7F\BB\08\7F"(%Vec3 %readtmp3, %Vec3 %readtmp4)
  %calltmp6 = call %Vec3 @Vec3.normalize(%Vec3 %calltmp5)
  store %Vec3 %calltmp6, ptr %s, align 4
  %readtmp7 = load %Vec3, ptr %s, align 4
  %readtmp8 = load %Vec3, ptr %f, align 4
  %calltmp9 = call %Vec3 @"Vec3.cross\7F\BB\08\7F"(%Vec3 %readtmp7, %Vec3 %readtmp8)
  store %Vec3 %calltmp9, ptr %u, align 4
  %3 = getelementptr inbounds %Mat4, ptr %result, i32 0, i32 0
  %elemtemp = getelementptr inbounds [4 x [4 x float]], ptr %3, i32 0, i32 0
  %elemtemp10 = getelementptr inbounds [4 x float], ptr %elemtemp, i32 0, i32 0
  %4 = getelementptr inbounds %Vec3, ptr %s, i32 0, i32 0
  %readtmp11 = load float, ptr %4, align 4
  store float %readtmp11, ptr %elemtemp10, align 4
  %5 = getelementptr inbounds %Mat4, ptr %result, i32 0, i32 0
  %elemtemp12 = getelementptr inbounds [4 x [4 x float]], ptr %5, i32 0, i32 0
  %elemtemp13 = getelementptr inbounds [4 x float], ptr %elemtemp12, i32 0, i32 1
  %6 = getelementptr inbounds %Vec3, ptr %s, i32 0, i32 1
  %readtmp14 = load float, ptr %6, align 4
  store float %readtmp14, ptr %elemtemp13, align 4
  %7 = getelementptr inbounds %Mat4, ptr %result, i32 0, i32 0
  %elemtemp15 = getelementptr inbounds [4 x [4 x float]], ptr %7, i32 0, i32 0
  %elemtemp16 = getelementptr inbounds [4 x float], ptr %elemtemp15, i32 0, i32 2
  %8 = getelementptr inbounds %Vec3, ptr %s, i32 0, i32 2
  %readtmp17 = load float, ptr %8, align 4
  store float %readtmp17, ptr %elemtemp16, align 4
  %9 = getelementptr inbounds %Mat4, ptr %result, i32 0, i32 0
  %elemtemp18 = getelementptr inbounds [4 x [4 x float]], ptr %9, i32 0, i32 0
  %elemtemp19 = getelementptr inbounds [4 x float], ptr %elemtemp18, i32 0, i32 3
  store float 0.000000e+00, ptr %elemtemp19, align 4
  %10 = getelementptr inbounds %Mat4, ptr %result, i32 0, i32 0
  %elemtemp20 = getelementptr inbounds [4 x [4 x float]], ptr %10, i32 0, i32 1
  %elemtemp21 = getelementptr inbounds [4 x float], ptr %elemtemp20, i32 0, i32 0
  %11 = getelementptr inbounds %Vec3, ptr %u, i32 0, i32 0
  %readtmp22 = load float, ptr %11, align 4
  store float %readtmp22, ptr %elemtemp21, align 4
  %12 = getelementptr inbounds %Mat4, ptr %result, i32 0, i32 0
  %elemtemp23 = getelementptr inbounds [4 x [4 x float]], ptr %12, i32 0, i32 1
  %elemtemp24 = getelementptr inbounds [4 x float], ptr %elemtemp23, i32 0, i32 1
  %13 = getelementptr inbounds %Vec3, ptr %u, i32 0, i32 1
  %readtmp25 = load float, ptr %13, align 4
  store float %readtmp25, ptr %elemtemp24, align 4
  %14 = getelementptr inbounds %Mat4, ptr %result, i32 0, i32 0
  %elemtemp26 = getelementptr inbounds [4 x [4 x float]], ptr %14, i32 0, i32 1
  %elemtemp27 = getelementptr inbounds [4 x float], ptr %elemtemp26, i32 0, i32 2
  %15 = getelementptr inbounds %Vec3, ptr %u, i32 0, i32 2
  %readtmp28 = load float, ptr %15, align 4
  store float %readtmp28, ptr %elemtemp27, align 4
  %16 = getelementptr inbounds %Mat4, ptr %result, i32 0, i32 0
  %elemtemp29 = getelementptr inbounds [4 x [4 x float]], ptr %16, i32 0, i32 1
  %elemtemp30 = getelementptr inbounds [4 x float], ptr %elemtemp29, i32 0, i32 3
  store float 0.000000e+00, ptr %elemtemp30, align 4
  %17 = getelementptr inbounds %Mat4, ptr %result, i32 0, i32 0
  %elemtemp31 = getelementptr inbounds [4 x [4 x float]], ptr %17, i32 0, i32 2
  %elemtemp32 = getelementptr inbounds [4 x float], ptr %elemtemp31, i32 0, i32 0
  %18 = getelementptr inbounds %Vec3, ptr %f, i32 0, i32 0
  %readtmp33 = load float, ptr %18, align 4
  store float %readtmp33, ptr %elemtemp32, align 4
  %19 = getelementptr inbounds %Mat4, ptr %result, i32 0, i32 0
  %elemtemp34 = getelementptr inbounds [4 x [4 x float]], ptr %19, i32 0, i32 2
  %elemtemp35 = getelementptr inbounds [4 x float], ptr %elemtemp34, i32 0, i32 1
  %20 = getelementptr inbounds %Vec3, ptr %f, i32 0, i32 1
  %readtmp36 = load float, ptr %20, align 4
  store float %readtmp36, ptr %elemtemp35, align 4
  %21 = getelementptr inbounds %Mat4, ptr %result, i32 0, i32 0
  %elemtemp37 = getelementptr inbounds [4 x [4 x float]], ptr %21, i32 0, i32 2
  %elemtemp38 = getelementptr inbounds [4 x float], ptr %elemtemp37, i32 0, i32 2
  %22 = getelementptr inbounds %Vec3, ptr %f, i32 0, i32 2
  %readtmp39 = load float, ptr %22, align 4
  store float %readtmp39, ptr %elemtemp38, align 4
  %23 = getelementptr inbounds %Mat4, ptr %result, i32 0, i32 0
  %elemtemp40 = getelementptr inbounds [4 x [4 x float]], ptr %23, i32 0, i32 2
  %elemtemp41 = getelementptr inbounds [4 x float], ptr %elemtemp40, i32 0, i32 3
  store float 0.000000e+00, ptr %elemtemp41, align 4
  %24 = getelementptr inbounds %Mat4, ptr %result, i32 0, i32 0
  %elemtemp42 = getelementptr inbounds [4 x [4 x float]], ptr %24, i32 0, i32 3
  %elemtemp43 = getelementptr inbounds [4 x float], ptr %elemtemp42, i32 0, i32 0
  %readtmp44 = load %Vec3, ptr %s, align 4
  %readtmp45 = load %Vec3, ptr %eye, align 4
  %calltmp46 = call float @Vec3.dot(%Vec3 %readtmp44, %Vec3 %readtmp45)
  %multmp = fmul float %calltmp46, -1.000000e+00
  store float %multmp, ptr %elemtemp43, align 4
  %25 = getelementptr inbounds %Mat4, ptr %result, i32 0, i32 0
  %elemtemp47 = getelementptr inbounds [4 x [4 x float]], ptr %25, i32 0, i32 3
  %elemtemp48 = getelementptr inbounds [4 x float], ptr %elemtemp47, i32 0, i32 0
  %readtmp49 = load %Vec3, ptr %u, align 4
  %readtmp50 = load %Vec3, ptr %eye, align 4
  %calltmp51 = call float @Vec3.dot(%Vec3 %readtmp49, %Vec3 %readtmp50)
  %multmp52 = fmul float %calltmp51, -1.000000e+00
  store float %multmp52, ptr %elemtemp48, align 4
  %26 = getelementptr inbounds %Mat4, ptr %result, i32 0, i32 0
  %elemtemp53 = getelementptr inbounds [4 x [4 x float]], ptr %26, i32 0, i32 3
  %elemtemp54 = getelementptr inbounds [4 x float], ptr %elemtemp53, i32 0, i32 0
  %readtmp55 = load %Vec3, ptr %f, align 4
  %readtmp56 = load %Vec3, ptr %eye, align 4
  %calltmp57 = call float @Vec3.dot(%Vec3 %readtmp55, %Vec3 %readtmp56)
  store float %calltmp57, ptr %elemtemp54, align 4
  %27 = getelementptr inbounds %Mat4, ptr %result, i32 0, i32 0
  %elemtemp58 = getelementptr inbounds [4 x [4 x float]], ptr %27, i32 0, i32 3
  %elemtemp59 = getelementptr inbounds [4 x float], ptr %elemtemp58, i32 0, i32 3
  store float 1.000000e+00, ptr %elemtemp59, align 4
  %readtmp60 = load %Mat4, ptr %result, align 4
  ret %Mat4 %readtmp60
}

define %Mat4 @"Mat4.ortho\7F\BB\08\7F"(float %0, float %1, float %2, float %3, float %4, float %5) {
entry:
  %result = alloca %Mat4, align 8
  %f = alloca float, align 4
  store float %5, ptr %f, align 4
  %n = alloca float, align 4
  store float %4, ptr %n, align 4
  %t = alloca float, align 4
  store float %3, ptr %t, align 4
  %b = alloca float, align 4
  store float %2, ptr %b, align 4
  %r = alloca float, align 4
  store float %1, ptr %r, align 4
  %l = alloca float, align 4
  store float %0, ptr %l, align 4
  %6 = getelementptr inbounds %Mat4, ptr %result, i32 0, i32 0
  %elemtemp = getelementptr inbounds [4 x [4 x float]], ptr %6, i32 0, i32 0
  %elemtemp1 = getelementptr inbounds [4 x float], ptr %elemtemp, i32 0, i32 0
  %readtmp = load float, ptr %r, align 4
  %readtmp2 = load float, ptr %l, align 4
  %subtmp = fsub float %readtmp, %readtmp2
  %subtmp3 = fdiv float 2.000000e+00, %subtmp
  store float %subtmp3, ptr %elemtemp1, align 4
  %7 = getelementptr inbounds %Mat4, ptr %result, i32 0, i32 0
  %elemtemp4 = getelementptr inbounds [4 x [4 x float]], ptr %7, i32 0, i32 0
  %elemtemp5 = getelementptr inbounds [4 x float], ptr %elemtemp4, i32 0, i32 1
  store float 0.000000e+00, ptr %elemtemp5, align 4
  %8 = getelementptr inbounds %Mat4, ptr %result, i32 0, i32 0
  %elemtemp6 = getelementptr inbounds [4 x [4 x float]], ptr %8, i32 0, i32 0
  %elemtemp7 = getelementptr inbounds [4 x float], ptr %elemtemp6, i32 0, i32 2
  store float 0.000000e+00, ptr %elemtemp7, align 4
  %9 = getelementptr inbounds %Mat4, ptr %result, i32 0, i32 0
  %elemtemp8 = getelementptr inbounds [4 x [4 x float]], ptr %9, i32 0, i32 0
  %elemtemp9 = getelementptr inbounds [4 x float], ptr %elemtemp8, i32 0, i32 3
  store float 0.000000e+00, ptr %elemtemp9, align 4
  %10 = getelementptr inbounds %Mat4, ptr %result, i32 0, i32 0
  %elemtemp10 = getelementptr inbounds [4 x [4 x float]], ptr %10, i32 0, i32 1
  %elemtemp11 = getelementptr inbounds [4 x float], ptr %elemtemp10, i32 0, i32 0
  store float 0.000000e+00, ptr %elemtemp11, align 4
  %11 = getelementptr inbounds %Mat4, ptr %result, i32 0, i32 0
  %elemtemp12 = getelementptr inbounds [4 x [4 x float]], ptr %11, i32 0, i32 1
  %elemtemp13 = getelementptr inbounds [4 x float], ptr %elemtemp12, i32 0, i32 1
  %readtmp14 = load float, ptr %t, align 4
  %readtmp15 = load float, ptr %b, align 4
  %subtmp16 = fsub float %readtmp14, %readtmp15
  %subtmp17 = fdiv float 2.000000e+00, %subtmp16
  store float %subtmp17, ptr %elemtemp13, align 4
  %12 = getelementptr inbounds %Mat4, ptr %result, i32 0, i32 0
  %elemtemp18 = getelementptr inbounds [4 x [4 x float]], ptr %12, i32 0, i32 1
  %elemtemp19 = getelementptr inbounds [4 x float], ptr %elemtemp18, i32 0, i32 2
  store float 0.000000e+00, ptr %elemtemp19, align 4
  %13 = getelementptr inbounds %Mat4, ptr %result, i32 0, i32 0
  %elemtemp20 = getelementptr inbounds [4 x [4 x float]], ptr %13, i32 0, i32 1
  %elemtemp21 = getelementptr inbounds [4 x float], ptr %elemtemp20, i32 0, i32 3
  store float 0.000000e+00, ptr %elemtemp21, align 4
  %14 = getelementptr inbounds %Mat4, ptr %result, i32 0, i32 0
  %elemtemp22 = getelementptr inbounds [4 x [4 x float]], ptr %14, i32 0, i32 2
  %elemtemp23 = getelementptr inbounds [4 x float], ptr %elemtemp22, i32 0, i32 0
  store float 0.000000e+00, ptr %elemtemp23, align 4
  %15 = getelementptr inbounds %Mat4, ptr %result, i32 0, i32 0
  %elemtemp24 = getelementptr inbounds [4 x [4 x float]], ptr %15, i32 0, i32 2
  %elemtemp25 = getelementptr inbounds [4 x float], ptr %elemtemp24, i32 0, i32 1
  store float 0.000000e+00, ptr %elemtemp25, align 4
  %16 = getelementptr inbounds %Mat4, ptr %result, i32 0, i32 0
  %elemtemp26 = getelementptr inbounds [4 x [4 x float]], ptr %16, i32 0, i32 2
  %elemtemp27 = getelementptr inbounds [4 x float], ptr %elemtemp26, i32 0, i32 2
  %readtmp28 = load float, ptr %f, align 4
  %readtmp29 = load float, ptr %n, align 4
  %subtmp30 = fsub float %readtmp28, %readtmp29
  %subtmp31 = fdiv float -2.000000e+00, %subtmp30
  store float %subtmp31, ptr %elemtemp27, align 4
  %17 = getelementptr inbounds %Mat4, ptr %result, i32 0, i32 0
  %elemtemp32 = getelementptr inbounds [4 x [4 x float]], ptr %17, i32 0, i32 2
  %elemtemp33 = getelementptr inbounds [4 x float], ptr %elemtemp32, i32 0, i32 3
  store float 0.000000e+00, ptr %elemtemp33, align 4
  %18 = getelementptr inbounds %Mat4, ptr %result, i32 0, i32 0
  %elemtemp34 = getelementptr inbounds [4 x [4 x float]], ptr %18, i32 0, i32 3
  %elemtemp35 = getelementptr inbounds [4 x float], ptr %elemtemp34, i32 0, i32 0
  %readtmp36 = load float, ptr %r, align 4
  %readtmp37 = load float, ptr %l, align 4
  %addtmp = fadd float %readtmp36, %readtmp37
  %multmp = fmul float %addtmp, -1.000000e+00
  %readtmp38 = load float, ptr %r, align 4
  %readtmp39 = load float, ptr %l, align 4
  %subtmp40 = fsub float %readtmp38, %readtmp39
  %subtmp41 = fdiv float %multmp, %subtmp40
  store float %subtmp41, ptr %elemtemp35, align 4
  %19 = getelementptr inbounds %Mat4, ptr %result, i32 0, i32 0
  %elemtemp42 = getelementptr inbounds [4 x [4 x float]], ptr %19, i32 0, i32 3
  %elemtemp43 = getelementptr inbounds [4 x float], ptr %elemtemp42, i32 0, i32 1
  %readtmp44 = load float, ptr %t, align 4
  %readtmp45 = load float, ptr %b, align 4
  %addtmp46 = fadd float %readtmp44, %readtmp45
  %multmp47 = fmul float %addtmp46, -1.000000e+00
  %readtmp48 = load float, ptr %t, align 4
  %readtmp49 = load float, ptr %b, align 4
  %subtmp50 = fsub float %readtmp48, %readtmp49
  %subtmp51 = fdiv float %multmp47, %subtmp50
  store float %subtmp51, ptr %elemtemp43, align 4
  %20 = getelementptr inbounds %Mat4, ptr %result, i32 0, i32 0
  %elemtemp52 = getelementptr inbounds [4 x [4 x float]], ptr %20, i32 0, i32 3
  %elemtemp53 = getelementptr inbounds [4 x float], ptr %elemtemp52, i32 0, i32 2
  %readtmp54 = load float, ptr %f, align 4
  %readtmp55 = load float, ptr %n, align 4
  %addtmp56 = fadd float %readtmp54, %readtmp55
  %multmp57 = fmul float %addtmp56, -1.000000e+00
  %readtmp58 = load float, ptr %f, align 4
  %readtmp59 = load float, ptr %n, align 4
  %subtmp60 = fsub float %readtmp58, %readtmp59
  %subtmp61 = fdiv float %multmp57, %subtmp60
  store float %subtmp61, ptr %elemtemp53, align 4
  %21 = getelementptr inbounds %Mat4, ptr %result, i32 0, i32 0
  %elemtemp62 = getelementptr inbounds [4 x [4 x float]], ptr %21, i32 0, i32 3
  %elemtemp63 = getelementptr inbounds [4 x float], ptr %elemtemp62, i32 0, i32 3
  store float 1.000000e+00, ptr %elemtemp63, align 4
  %readtmp64 = load %Mat4, ptr %result, align 4
  ret %Mat4 %readtmp64
}

declare i1 @glfwInit()

declare ptr addrspace(5) @glfwCreateWindow(i32, i32, ptr addrspace(5), ptr addrspace(5), ptr addrspace(5))

declare void @glfwTerminate()

declare void @glfwPollEvents()

declare void @glfwSwapBuffers(ptr addrspace(5))

declare void @glfwMakeContextCurrent(ptr addrspace(5))

declare i1 @glfwWindowShouldClose(ptr addrspace(5))

declare void @glfwGetFramebufferSize(ptr addrspace(5), ptr addrspace(5), ptr addrspace(5))

declare void @glClearColor(float, float, float, float)

declare void @glClear(i32)

declare void @glEnable(i32)

declare void @glBlendFunc(i32, i32)

declare void @glDeleteBuffers(i32, ptr addrspace(5))

declare void @glGenBuffers(i32, ptr addrspace(5))

declare void @glBindBuffer(i32, i32)

declare void @glBindTexture(i32, i32)

declare void @glBufferData(i32, i32, ptr addrspace(5), i32)

declare void @glVertexAttribPointer(i32, i32, i32, i32, i32, ptr addrspace(5))

declare void @glEnableVertexAttribArray(i32)

declare void @glDrawArrays(i32, i32, i32)

declare i32 @glCreateShader(i32)

declare i32 @glCreateProgram()

declare void @glShaderSource(i32, i32, ptr addrspace(5), ptr addrspace(5))

declare void @glCompileShader(i32)

declare void @glAttachShader(i32, i32)

declare void @glLinkProgram(i32)

declare void @glUseProgram(i32)

declare void @glGenTextures(i32, ptr addrspace(5))

declare void @glTexImage2D(i32, i32, i32, i32, i32, i32, i32, i32, ptr addrspace(5))

declare void @glGenerateMipmap(i32)

declare i32 @glGetUniformLocation(i32, ptr addrspace(5))

declare void @glUniformMatrix4fv(i32, i32, i32, ptr addrspace(5))

define ptr addrspace(5) @GFXContext.init() {
entry:
  %result = alloca ptr addrspace(5), align 8
  %calltmp = call ptr addrspace(5) @malloc(i32 ptrtoint (ptr addrspace(64) getelementptr inbounds ([1 x %GFXContext], i64 0, i32 1) to i32))
  store ptr addrspace(5) %calltmp, ptr %result, align 8
  %calltmp1 = call i1 @glfwInit()
  %nottmp = xor i1 %calltmp1, true
  %ifcond = icmp ne i1 %nottmp, false
  br i1 %ifcond, label %ifbody, label %ifmerge

ifbody:                                           ; preds = %entry
  %calltmp2 = call void @printf(ptr @str)
  %calltmp3 = call void @exit(i32 1)
  br label %ifmerge

ifmerge:                                          ; preds = %ifbody, %entry
  %readtmp = load ptr addrspace(5), ptr %result, align 8
  %0 = getelementptr inbounds %GFXContext, ptr addrspace(5) %readtmp, i32 0, i32 0
  %calltmp4 = call ptr addrspace(5) @glfwCreateWindow(i32 640, i32 480, ptr @str.1, i64 0, i64 0)
  store ptr addrspace(5) %calltmp4, ptr addrspace(5) %0, align 8
  %readtmp5 = load ptr addrspace(5), ptr %result, align 8
  %1 = getelementptr inbounds %GFXContext, ptr addrspace(5) %readtmp5, i32 0, i32 0
  %readtmp6 = load ptr addrspace(5), ptr addrspace(5) %1, align 8
  %calltmp7 = call void @glfwMakeContextCurrent(ptr addrspace(5) %readtmp6)
  %readtmp8 = load ptr addrspace(5), ptr %result, align 8
  %2 = getelementptr inbounds %GFXContext, ptr addrspace(5) %readtmp8, i32 0, i32 0
  %readtmp9 = load ptr addrspace(5), ptr addrspace(5) %2, align 8
  %readtmp10 = load ptr addrspace(5), ptr %result, align 8
  %3 = getelementptr inbounds %GFXContext, ptr addrspace(5) %readtmp10, i32 0, i32 2
  %4 = getelementptr inbounds %IVec2, ptr addrspace(5) %3, i32 0, i32 0
  %readtmp11 = load ptr addrspace(5), ptr %result, align 8
  %5 = getelementptr inbounds %GFXContext, ptr addrspace(5) %readtmp11, i32 0, i32 2
  %6 = getelementptr inbounds %IVec2, ptr addrspace(5) %5, i32 0, i32 1
  %calltmp12 = call void @glfwGetFramebufferSize(ptr addrspace(5) %readtmp9, ptr addrspace(5) %4, ptr addrspace(5) %6)
  %readtmp13 = load ptr addrspace(5), ptr %result, align 8
  %7 = getelementptr inbounds %GFXContext, ptr addrspace(5) %readtmp13, i32 0, i32 1
  %8 = getelementptr inbounds %Color, ptr addrspace(5) %7, i32 0, i32 0
  store float 0.000000e+00, ptr addrspace(5) %8, align 4
  %readtmp14 = load ptr addrspace(5), ptr %result, align 8
  %9 = getelementptr inbounds %GFXContext, ptr addrspace(5) %readtmp14, i32 0, i32 1
  %10 = getelementptr inbounds %Color, ptr addrspace(5) %9, i32 0, i32 1
  store float 0.000000e+00, ptr addrspace(5) %10, align 4
  %readtmp15 = load ptr addrspace(5), ptr %result, align 8
  %11 = getelementptr inbounds %GFXContext, ptr addrspace(5) %readtmp15, i32 0, i32 1
  %12 = getelementptr inbounds %Color, ptr addrspace(5) %11, i32 0, i32 2
  store float 0.000000e+00, ptr addrspace(5) %12, align 4
  %readtmp16 = load ptr addrspace(5), ptr %result, align 8
  %13 = getelementptr inbounds %GFXContext, ptr addrspace(5) %readtmp16, i32 0, i32 1
  %14 = getelementptr inbounds %Color, ptr addrspace(5) %13, i32 0, i32 3
  store float 1.000000e+00, ptr addrspace(5) %14, align 4
  %readtmp17 = load ptr addrspace(5), ptr %result, align 8
  ret ptr addrspace(5) %readtmp17
}

define i1 @GFXContext.poll(ptr addrspace(5) %0) {
entry:
  %calltmp = call void @glfwPollEvents()
  %1 = getelementptr inbounds %GFXContext, ptr addrspace(5) %0, i32 0, i32 0
  %readtmp = load ptr addrspace(5), ptr addrspace(5) %1, align 8
  %calltmp1 = call i1 @glfwWindowShouldClose(ptr addrspace(5) %readtmp)
  %nottmp = xor i1 %calltmp1, true
  ret i1 %nottmp
}

define void @GFXContext.clear(ptr addrspace(5) %0) {
entry:
  %ctx = alloca ptr addrspace(5), align 8
  store ptr addrspace(5) %0, ptr %ctx, align 8
  %readtmp = load ptr addrspace(5), ptr %ctx, align 8
  %1 = getelementptr inbounds %GFXContext, ptr addrspace(5) %readtmp, i32 0, i32 1
  %2 = getelementptr inbounds %Color, ptr addrspace(5) %1, i32 0, i32 0
  %readtmp1 = load float, ptr addrspace(5) %2, align 4
  %readtmp2 = load ptr addrspace(5), ptr %ctx, align 8
  %3 = getelementptr inbounds %GFXContext, ptr addrspace(5) %readtmp2, i32 0, i32 1
  %4 = getelementptr inbounds %Color, ptr addrspace(5) %3, i32 0, i32 1
  %readtmp3 = load float, ptr addrspace(5) %4, align 4
  %readtmp4 = load ptr addrspace(5), ptr %ctx, align 8
  %5 = getelementptr inbounds %GFXContext, ptr addrspace(5) %readtmp4, i32 0, i32 1
  %6 = getelementptr inbounds %Color, ptr addrspace(5) %5, i32 0, i32 2
  %readtmp5 = load float, ptr addrspace(5) %6, align 4
  %readtmp6 = load ptr addrspace(5), ptr %ctx, align 8
  %7 = getelementptr inbounds %GFXContext, ptr addrspace(5) %readtmp6, i32 0, i32 1
  %8 = getelementptr inbounds %Color, ptr addrspace(5) %7, i32 0, i32 3
  %readtmp7 = load float, ptr addrspace(5) %8, align 4
  %calltmp = call void @glClearColor(float %readtmp1, float %readtmp3, float %readtmp5, float %readtmp7)
  %calltmp8 = call void @glClear(i32 16384)
  ret void
}

define void @GFXContext.swap(ptr addrspace(5) %0) {
entry:
  %1 = getelementptr inbounds %GFXContext, ptr addrspace(5) %0, i32 0, i32 0
  %readtmp = load ptr addrspace(5), ptr addrspace(5) %1, align 8
  %calltmp = call void @glfwSwapBuffers(ptr addrspace(5) %readtmp)
  ret void
}

define void @GFXContext.free(ptr addrspace(5) %0) {
entry:
  %calltmp = call void @free(ptr addrspace(5) %0)
  ret void
}

define ptr addrspace(5) @"Shader.newptr addrspace(!"(ptr addrspace(5) %0, i32 %1) {
entry:
  %result = alloca ptr addrspace(5), align 8
  %files = alloca ptr addrspace(5), align 8
  %count = alloca i32, align 4
  store i32 %1, ptr %count, align 4
  store ptr addrspace(5) %0, ptr %files, align 8
  %calltmp = call ptr addrspace(5) @malloc(i32 ptrtoint (ptr addrspace(64) getelementptr inbounds ([1 x %Shader], i64 0, i32 1) to i32))
  store ptr addrspace(5) %calltmp, ptr %result, align 8
  %readtmp = load ptr addrspace(5), ptr %result, align 8
  %2 = getelementptr inbounds %Shader, ptr addrspace(5) %readtmp, i32 0, i32 0
  %calltmp1 = call i32 @glCreateProgram()
  store i32 %calltmp1, ptr addrspace(5) %2, align 4
  %readtmp2 = load i32, ptr %count, align 4
  %neqtmp = icmp eq i32 0, %readtmp2
  %ifcond = icmp ne i1 %neqtmp, false
  br i1 %ifcond, label %ifbody, label %ifmerge

ifbody:                                           ; preds = %entry
  ret i64 0
  br label %ifmerge

ifmerge:                                          ; preds = %ifbody, %entry
  br label %dobody

dobody:                                           ; preds = %dobody, %ifmerge
  %readtmp3 = load i32, ptr %count, align 4
  %subtmp = sub i32 %readtmp3, 1
  store i32 %subtmp, ptr %count, align 4
  %shader = alloca i32, align 4
  %readtmp4 = load ptr addrspace(5), ptr %files, align 8
  %readtmp5 = load i32, ptr %count, align 4
  %idxtmp = getelementptr inbounds [1 x %ShaderFile], ptr addrspace(5) %readtmp4, i32 %readtmp5
  %3 = getelementptr inbounds %ShaderFile, ptr addrspace(5) %idxtmp, i32 0, i32 2
  %readtmp6 = load i32, ptr addrspace(5) %3, align 4
  %calltmp7 = call i32 @glCreateShader(i32 %readtmp6)
  store i32 %calltmp7, ptr %shader, align 4
  %readtmp8 = load i32, ptr %shader, align 4
  %readtmp9 = load ptr addrspace(5), ptr %files, align 8
  %readtmp10 = load i32, ptr %count, align 4
  %idxtmp11 = getelementptr inbounds [1 x %ShaderFile], ptr addrspace(5) %readtmp9, i32 %readtmp10
  %4 = getelementptr inbounds %ShaderFile, ptr addrspace(5) %idxtmp11, i32 0, i32 1
  %readtmp12 = load i32, ptr addrspace(5) %4, align 4
  %readtmp13 = load ptr addrspace(5), ptr %files, align 8
  %readtmp14 = load i32, ptr %count, align 4
  %idxtmp15 = getelementptr inbounds [1 x %ShaderFile], ptr addrspace(5) %readtmp13, i32 %readtmp14
  %5 = getelementptr inbounds %ShaderFile, ptr addrspace(5) %idxtmp15, i32 0, i32 0
  %readtmp16 = load ptr addrspace(5), ptr addrspace(5) %5, align 8
  %calltmp17 = call void @glShaderSource(i32 %readtmp8, i32 %readtmp12, ptr addrspace(5) %readtmp16, i64 0)
  %readtmp18 = load i32, ptr %shader, align 4
  %calltmp19 = call void @glCompileShader(i32 %readtmp18)
  %readtmp20 = load ptr addrspace(5), ptr %result, align 8
  %6 = getelementptr inbounds %Shader, ptr addrspace(5) %readtmp20, i32 0, i32 0
  %readtmp21 = load i32, ptr addrspace(5) %6, align 4
  %readtmp22 = load i32, ptr %shader, align 4
  %calltmp23 = call void @glAttachShader(i32 %readtmp21, i32 %readtmp22)
  %readtmp24 = load i32, ptr %count, align 4
  %lttmp = icmp ugt i32 %readtmp24, 0
  %docond = icmp ne i1 %lttmp, false
  br i1 %docond, label %dobody, label %domerge

domerge:                                          ; preds = %dobody
  %readtmp25 = load ptr addrspace(5), ptr %result, align 8
  %7 = getelementptr inbounds %Shader, ptr addrspace(5) %readtmp25, i32 0, i32 0
  %readtmp26 = load i32, ptr addrspace(5) %7, align 4
  %calltmp27 = call void @glLinkProgram(i32 %readtmp26)
  %readtmp28 = load ptr addrspace(5), ptr %result, align 8
  ret ptr addrspace(5) %readtmp28
}

define void @"Shader.setSizeptr addrsp\91\02"(%Vec2 %0, ptr addrspace(5) %1) {
entry:
  %proj = alloca %Mat4, align 8
  %shd = alloca ptr addrspace(5), align 8
  %size = alloca %Vec2, align 8
  store ptr addrspace(5) %1, ptr %shd, align 8
  store %Vec2 %0, ptr %size, align 4
  %readtmp = load %Vec2, ptr %size, align 4
  %extracted = extractvalue %Vec2 %readtmp, 0
  %readtmp1 = load %Vec2, ptr %size, align 4
  %extracted2 = extractvalue %Vec2 %readtmp1, 1
  %calltmp = call %Mat4 @"Mat4.ortho\7F\BB\08\7F"(float 0.000000e+00, float %extracted, float %extracted2, float 0.000000e+00, float 1.000000e+02, float -1.000000e+00)
  store %Mat4 %calltmp, ptr %proj, align 4
  %readtmp3 = load ptr addrspace(5), ptr %shd, align 8
  %2 = getelementptr inbounds %Shader, ptr addrspace(5) %readtmp3, i32 0, i32 0
  %readtmp4 = load i32, ptr addrspace(5) %2, align 4
  %calltmp5 = call void @glUseProgram(i32 %readtmp4)
  %readtmp6 = load ptr addrspace(5), ptr %shd, align 8
  %3 = getelementptr inbounds %Shader, ptr addrspace(5) %readtmp6, i32 0, i32 0
  %readtmp7 = load i32, ptr addrspace(5) %3, align 4
  %calltmp8 = call i32 @glGetUniformLocation(i32 %readtmp7, ptr @str.2)
  %4 = getelementptr inbounds %Mat4, ptr %proj, i32 0, i32 0
  %calltmp9 = call void @glUniformMatrix4fv(i32 %calltmp8, i32 1, i32 0, ptr %4)
  ret void
}

declare ptr addrspace(5) @stbi_load(ptr addrspace(5), ptr addrspace(5), ptr addrspace(5), ptr addrspace(5), i32)

declare void @stbi_image_free(ptr addrspace(5))

define ptr addrspace(5) @"Texture.newtx, align 8\0A \91\02"(ptr addrspace(5) %0) {
entry:
  %file = alloca ptr addrspace(5), align 8
  %result = alloca ptr addrspace(5), align 8
  %data = alloca ptr addrspace(5), align 8
  store ptr addrspace(5) %0, ptr %file, align 8
  %calltmp = call ptr addrspace(5) @malloc(i32 ptrtoint (ptr addrspace(64) getelementptr inbounds ([1 x %Texture], i64 0, i32 1) to i32))
  store ptr addrspace(5) %calltmp, ptr %result, align 8
  %channels = alloca i32, align 4
  %readtmp = load ptr addrspace(5), ptr %file, align 8
  %readtmp1 = load ptr addrspace(5), ptr %result, align 8
  %1 = getelementptr inbounds %Texture, ptr addrspace(5) %readtmp1, i32 0, i32 1
  %2 = getelementptr inbounds %IVec2, ptr addrspace(5) %1, i32 0, i32 0
  %readtmp2 = load ptr addrspace(5), ptr %result, align 8
  %3 = getelementptr inbounds %Texture, ptr addrspace(5) %readtmp2, i32 0, i32 1
  %4 = getelementptr inbounds %IVec2, ptr addrspace(5) %3, i32 0, i32 1
  %calltmp3 = call ptr addrspace(5) @stbi_load(ptr addrspace(5) %readtmp, ptr addrspace(5) %2, ptr addrspace(5) %4, ptr %channels, i32 4)
  store ptr addrspace(5) %calltmp3, ptr %data, align 8
  %readtmp4 = load ptr addrspace(5), ptr %result, align 8
  %5 = getelementptr inbounds %Texture, ptr addrspace(5) %readtmp4, i32 0, i32 0
  %calltmp5 = call void @glGenTextures(i32 1, ptr addrspace(5) %5)
  %readtmp6 = load ptr addrspace(5), ptr %result, align 8
  %6 = getelementptr inbounds %Texture, ptr addrspace(5) %readtmp6, i32 0, i32 0
  %readtmp7 = load i32, ptr addrspace(5) %6, align 4
  %calltmp8 = call void @glBindTexture(i32 3553, i32 %readtmp7)
  %readtmp9 = load ptr addrspace(5), ptr %result, align 8
  %7 = getelementptr inbounds %Texture, ptr addrspace(5) %readtmp9, i32 0, i32 1
  %8 = getelementptr inbounds %IVec2, ptr addrspace(5) %7, i32 0, i32 0
  %readtmp10 = load i32, ptr addrspace(5) %8, align 4
  %readtmp11 = load ptr addrspace(5), ptr %result, align 8
  %9 = getelementptr inbounds %Texture, ptr addrspace(5) %readtmp11, i32 0, i32 1
  %10 = getelementptr inbounds %IVec2, ptr addrspace(5) %9, i32 0, i32 1
  %readtmp12 = load i32, ptr addrspace(5) %10, align 4
  %readtmp13 = load ptr addrspace(5), ptr %data, align 8
  %calltmp14 = call void @glTexImage2D(i32 3553, i32 0, i32 6408, i32 %readtmp10, i32 %readtmp12, i32 0, i32 6408, i32 5121, ptr addrspace(5) %readtmp13)
  %calltmp15 = call void @glGenerateMipmap(i32 3553)
  %readtmp16 = load ptr addrspace(5), ptr %data, align 8
  %calltmp17 = call void @stbi_image_free(ptr addrspace(5) %readtmp16)
  %readtmp18 = load ptr addrspace(5), ptr %result, align 8
  ret ptr addrspace(5) %readtmp18
}

define i64 @"Verts.getHash\7F"(ptr addrspace(5) %0) {
entry:
  %verts = alloca ptr addrspace(5), align 8
  store ptr addrspace(5) %0, ptr %verts, align 8
  %readtmp = load ptr addrspace(5), ptr %verts, align 8
  %1 = getelementptr inbounds %Verts, ptr addrspace(5) %readtmp, i32 0, i32 0
  %readtmp1 = load ptr addrspace(5), ptr addrspace(5) %1, align 8
  %readtmp2 = load ptr addrspace(5), ptr %verts, align 8
  %2 = getelementptr inbounds %Verts, ptr addrspace(5) %readtmp2, i32 0, i32 1
  %readtmp3 = load i32, ptr addrspace(5) %2, align 4
  %multmp = mul i32 %readtmp3, ptrtoint (ptr addrspace(64) getelementptr inbounds ([1 x %Vert], i64 0, i32 1) to i32)
  %calltmp = call i64 @Hash.get(ptr addrspace(5) %readtmp1, i32 %multmp)
  ret i64 %calltmp
}

define ptr addrspace(5) @Drawer.genVerts(ptr addrspace(5) %0) {
entry:
  %readtmp = load %Drawer, ptr addrspace(5) %0, align 8
  %extracted = extractvalue %Drawer %readtmp, 2
  %readtmp1 = load %Drawer, ptr addrspace(5) %0, align 8
  %extracted2 = extractvalue %Drawer %readtmp1, 0
  %calltmp = call addrspace(5) ptr addrspace(5) %extracted2(ptr addrspace(5) %extracted)
  ret ptr addrspace(5) %calltmp
}

define i64 @SBQueueEntry.getHash(ptr addrspace(5) %0) {
entry:
  %entry1 = alloca ptr addrspace(5), align 8
  store ptr addrspace(5) %0, ptr %entry1, align 8
  %readtmp = load ptr addrspace(5), ptr %entry1, align 8
  %1 = getelementptr inbounds %SBQueueEntry, ptr addrspace(5) %readtmp, i32 0, i32 2
  %readtmp2 = load ptr addrspace(5), ptr addrspace(5) %1, align 8
  %readtmp3 = load ptr addrspace(5), ptr %entry1, align 8
  %2 = getelementptr inbounds %SBQueueEntry, ptr addrspace(5) %readtmp3, i32 0, i32 3
  %readtmp4 = load ptr addrspace(5), ptr addrspace(5) %2, align 8
  %calltmp = call i64 @"Verts.getHash\7F"(ptr addrspace(5) %readtmp4)
  %addtmp = add ptr addrspace(5) %readtmp2, i64 %calltmp
  ret ptr addrspace(5) %addtmp
}

define i32 @SBQueue.getSize(ptr addrspace(5) %0) {
entry:
  %1 = getelementptr inbounds %SBQueue, ptr addrspace(5) %0, i32 0, i32 1
  %readtmp = load i32, ptr addrspace(5) %1, align 4
  %multmp = mul i32 %readtmp, ptrtoint (ptr addrspace(64) getelementptr inbounds ([1 x %SBQueueEntry], i64 0, i32 1) to i32)
  ret i32 %multmp
}

define ptr addrspace(5) @SBQueue.getEntry(ptr addrspace(5) %0, i32 %1) {
entry:
  %q = alloca ptr addrspace(5), align 8
  store ptr addrspace(5) %0, ptr %q, align 8
  %multmp = mul i32 %1, ptrtoint (ptr addrspace(64) getelementptr inbounds ([1 x %SBQueueEntry], i64 0, i32 1) to i32)
  %readtmp = load ptr addrspace(5), ptr %q, align 8
  %2 = getelementptr inbounds %SBQueue, ptr addrspace(5) %readtmp, i32 0, i32 0
  %readtmp1 = load ptr addrspace(5), ptr addrspace(5) %2, align 8
  %calltmp = call ptr addrspace(5) @mem.add(ptr addrspace(5) %readtmp1, i32 %multmp)
  ret ptr addrspace(5) %calltmp
}

define void @SpriteBatch.init(ptr addrspace(5) %0) {
entry:
  %sb = alloca ptr addrspace(5), align 8
  store ptr addrspace(5) %0, ptr %sb, align 8
  %readtmp = load ptr addrspace(5), ptr %sb, align 8
  %1 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp, i32 0, i32 3
  store i32 0, ptr addrspace(5) %1, align 4
  %readtmp1 = load ptr addrspace(5), ptr %sb, align 8
  %2 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp1, i32 0, i32 2
  %calltmp = call ptr addrspace(5) @malloc(i32 0)
  store ptr addrspace(5) %calltmp, ptr addrspace(5) %2, align 8
  %readtmp2 = load ptr addrspace(5), ptr %sb, align 8
  %3 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp2, i32 0, i32 1
  %calltmp3 = call ptr addrspace(5) @malloc(i32 ptrtoint (ptr addrspace(64) getelementptr inbounds ([1 x %SBQueue], i64 0, i32 1) to i32))
  store ptr addrspace(5) %calltmp3, ptr addrspace(5) %3, align 8
  %readtmp4 = load ptr addrspace(5), ptr %sb, align 8
  %4 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp4, i32 0, i32 0
  %calltmp5 = call ptr addrspace(5) @malloc(i32 ptrtoint (ptr addrspace(64) getelementptr inbounds ([1 x %SBQueue], i64 0, i32 1) to i32))
  store ptr addrspace(5) %calltmp5, ptr addrspace(5) %4, align 8
  %readtmp6 = load ptr addrspace(5), ptr %sb, align 8
  %5 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp6, i32 0, i32 1
  %readtmp7 = load ptr addrspace(5), ptr addrspace(5) %5, align 8
  %6 = getelementptr inbounds %SBQueue, ptr addrspace(5) %readtmp7, i32 0, i32 1
  store i32 0, ptr addrspace(5) %6, align 4
  %readtmp8 = load ptr addrspace(5), ptr %sb, align 8
  %7 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp8, i32 0, i32 0
  %readtmp9 = load ptr addrspace(5), ptr addrspace(5) %7, align 8
  %8 = getelementptr inbounds %SBQueue, ptr addrspace(5) %readtmp9, i32 0, i32 1
  store i32 0, ptr addrspace(5) %8, align 4
  %readtmp10 = load ptr addrspace(5), ptr %sb, align 8
  %9 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp10, i32 0, i32 1
  %readtmp11 = load ptr addrspace(5), ptr addrspace(5) %9, align 8
  %10 = getelementptr inbounds %SBQueue, ptr addrspace(5) %readtmp11, i32 0, i32 0
  %calltmp12 = call ptr addrspace(5) @malloc(i32 10)
  store ptr addrspace(5) %calltmp12, ptr addrspace(5) %10, align 8
  %readtmp13 = load ptr addrspace(5), ptr %sb, align 8
  %11 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp13, i32 0, i32 0
  %readtmp14 = load ptr addrspace(5), ptr addrspace(5) %11, align 8
  %12 = getelementptr inbounds %SBQueue, ptr addrspace(5) %readtmp14, i32 0, i32 0
  %calltmp15 = call ptr addrspace(5) @malloc(i32 10)
  store ptr addrspace(5) %calltmp15, ptr addrspace(5) %12, align 8
  ret void
}

define void @SpriteBatch.deinit(ptr addrspace(5) %0) {
entry:
  %sb = alloca ptr addrspace(5), align 8
  store ptr addrspace(5) %0, ptr %sb, align 8
  %readtmp = load ptr addrspace(5), ptr %sb, align 8
  %1 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp, i32 0, i32 1
  %readtmp1 = load ptr addrspace(5), ptr addrspace(5) %1, align 8
  %2 = getelementptr inbounds %SBQueue, ptr addrspace(5) %readtmp1, i32 0, i32 0
  %readtmp2 = load ptr addrspace(5), ptr addrspace(5) %2, align 8
  %calltmp = call void @free(ptr addrspace(5) %readtmp2)
  %readtmp3 = load ptr addrspace(5), ptr %sb, align 8
  %3 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp3, i32 0, i32 1
  %readtmp4 = load ptr addrspace(5), ptr addrspace(5) %3, align 8
  %calltmp5 = call void @free(ptr addrspace(5) %readtmp4)
  %readtmp6 = load ptr addrspace(5), ptr %sb, align 8
  %4 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp6, i32 0, i32 0
  %readtmp7 = load ptr addrspace(5), ptr addrspace(5) %4, align 8
  %5 = getelementptr inbounds %SBQueue, ptr addrspace(5) %readtmp7, i32 0, i32 0
  %readtmp8 = load ptr addrspace(5), ptr addrspace(5) %5, align 8
  %calltmp9 = call void @free(ptr addrspace(5) %readtmp8)
  %readtmp10 = load ptr addrspace(5), ptr %sb, align 8
  %6 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp10, i32 0, i32 0
  %readtmp11 = load ptr addrspace(5), ptr addrspace(5) %6, align 8
  %calltmp12 = call void @free(ptr addrspace(5) %readtmp11)
  ret void
}

define void @SpriteBatch.draw(ptr addrspace(5) %0, ptr addrspace(5) %1) {
entry:
  %entry1 = alloca %SBQueueEntry, align 8
  %dr = alloca ptr addrspace(5), align 8
  %sb = alloca ptr addrspace(5), align 8
  store ptr addrspace(5) %1, ptr %dr, align 8
  store ptr addrspace(5) %0, ptr %sb, align 8
  %2 = getelementptr inbounds %SBQueueEntry, ptr %entry1, i32 0, i32 0
  store i1 true, ptr %2, align 1
  %3 = getelementptr inbounds %SBQueueEntry, ptr %entry1, i32 0, i32 2
  %readtmp = load ptr addrspace(5), ptr %dr, align 8
  %4 = getelementptr inbounds %Drawer, ptr addrspace(5) %readtmp, i32 0, i32 1
  %readtmp2 = load ptr addrspace(5), ptr addrspace(5) %4, align 8
  store ptr addrspace(5) %readtmp2, ptr %3, align 8
  %5 = getelementptr inbounds %SBQueueEntry, ptr %entry1, i32 0, i32 3
  %readtmp3 = load ptr addrspace(5), ptr %dr, align 8
  %calltmp = call ptr addrspace(5) @Drawer.genVerts(ptr addrspace(5) %readtmp3)
  store ptr addrspace(5) %calltmp, ptr %5, align 8
  %old = alloca i32, align 4
  %readtmp4 = load ptr addrspace(5), ptr %sb, align 8
  %6 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp4, i32 0, i32 1
  %readtmp5 = load ptr addrspace(5), ptr addrspace(5) %6, align 8
  %7 = getelementptr inbounds %SBQueue, ptr addrspace(5) %readtmp5, i32 0, i32 1
  %readtmp6 = load i32, ptr addrspace(5) %7, align 4
  store i32 %readtmp6, ptr %old, align 4
  %readtmp7 = load ptr addrspace(5), ptr %sb, align 8
  %8 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp7, i32 0, i32 1
  %readtmp8 = load ptr addrspace(5), ptr addrspace(5) %8, align 8
  %9 = getelementptr inbounds %SBQueue, ptr addrspace(5) %readtmp8, i32 0, i32 1
  %readtmp9 = load ptr addrspace(5), ptr %sb, align 8
  %10 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp9, i32 0, i32 1
  %readtmp10 = load ptr addrspace(5), ptr addrspace(5) %10, align 8
  %11 = getelementptr inbounds %SBQueue, ptr addrspace(5) %readtmp10, i32 0, i32 1
  %readtmp11 = load i32, ptr addrspace(5) %11, align 4
  %addtmp = add i32 %readtmp11, 1
  store i32 %addtmp, ptr addrspace(5) %9, align 4
  %readtmp12 = load ptr addrspace(5), ptr %sb, align 8
  %12 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp12, i32 0, i32 1
  %readtmp13 = load ptr addrspace(5), ptr addrspace(5) %12, align 8
  %13 = getelementptr inbounds %SBQueue, ptr addrspace(5) %readtmp13, i32 0, i32 0
  %readtmp14 = load ptr addrspace(5), ptr %sb, align 8
  %14 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp14, i32 0, i32 1
  %readtmp15 = load ptr addrspace(5), ptr addrspace(5) %14, align 8
  %15 = getelementptr inbounds %SBQueue, ptr addrspace(5) %readtmp15, i32 0, i32 0
  %readtmp16 = load ptr addrspace(5), ptr addrspace(5) %15, align 8
  %readtmp17 = load ptr addrspace(5), ptr %sb, align 8
  %16 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp17, i32 0, i32 1
  %readtmp18 = load ptr addrspace(5), ptr addrspace(5) %16, align 8
  %calltmp19 = call i32 @SBQueue.getSize(ptr addrspace(5) %readtmp18)
  %calltmp20 = call ptr addrspace(5) @realloc(ptr addrspace(5) %readtmp16, i32 %calltmp19)
  store ptr addrspace(5) %calltmp20, ptr addrspace(5) %13, align 8
  %readtmp21 = load ptr addrspace(5), ptr %sb, align 8
  %17 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp21, i32 0, i32 1
  %readtmp22 = load ptr addrspace(5), ptr addrspace(5) %17, align 8
  %readtmp23 = load i32, ptr %old, align 4
  %calltmp24 = call ptr addrspace(5) @SBQueue.getEntry(ptr addrspace(5) %readtmp22, i32 %readtmp23)
  %readtmp25 = load %SBQueueEntry, ptr %entry1, align 8
  store %SBQueueEntry %readtmp25, ptr addrspace(5) %calltmp24, align 8
  ret void
}

define void @SpriteBatch.finish(ptr addrspace(5) %0) {
entry:
  %sb = alloca ptr addrspace(5), align 8
  store ptr addrspace(5) %0, ptr %sb, align 8
  %idx = alloca i32, align 4
  %readtmp = load ptr addrspace(5), ptr %sb, align 8
  %1 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp, i32 0, i32 1
  %readtmp1 = load ptr addrspace(5), ptr addrspace(5) %1, align 8
  %2 = getelementptr inbounds %SBQueue, ptr addrspace(5) %readtmp1, i32 0, i32 1
  %ifcond = icmp ne ptr addrspace(5) %2, i1 false
  br i1 %ifcond, label %ifbody, label %ifmerge

ifbody:                                           ; preds = %entry
  store i32 0, ptr %idx, align 4
  br label %dobody

ifmerge:                                          ; preds = %domerge, %entry
  %calltmp41 = call void @glEnable(i32 3042)
  %calltmp42 = call void @glBlendFunc(i32 770, i32 771)
  %readtmp43 = load ptr addrspace(5), ptr %sb, align 8
  %3 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp43, i32 0, i32 3
  %readtmp44 = load i32, ptr addrspace(5) %3, align 4
  %readtmp45 = load ptr addrspace(5), ptr %sb, align 8
  %4 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp45, i32 0, i32 1
  %readtmp46 = load ptr addrspace(5), ptr addrspace(5) %4, align 8
  %5 = getelementptr inbounds %SBQueue, ptr addrspace(5) %readtmp46, i32 0, i32 1
  %readtmp47 = load i32, ptr addrspace(5) %5, align 4
  %eqtmp48 = icmp ne i32 %readtmp47, %readtmp44
  %ifcond49 = icmp ne i1 %eqtmp48, false
  br i1 %ifcond49, label %ifbody50, label %ifmerge51

dobody:                                           ; preds = %ifmerge11, %ifbody
  %readtmp2 = load ptr addrspace(5), ptr %sb, align 8
  %6 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp2, i32 0, i32 1
  %readtmp3 = load ptr addrspace(5), ptr addrspace(5) %6, align 8
  %readtmp4 = load i32, ptr %idx, align 4
  %calltmp = call ptr addrspace(5) @SBQueue.getEntry(ptr addrspace(5) %readtmp3, i32 %readtmp4)
  %7 = getelementptr inbounds %SBQueueEntry, ptr addrspace(5) %calltmp, i32 0, i32 0
  store i1 true, ptr addrspace(5) %7, align 1
  %readtmp5 = load i32, ptr %idx, align 4
  %readtmp6 = load ptr addrspace(5), ptr %sb, align 8
  %8 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp6, i32 0, i32 0
  %readtmp7 = load ptr addrspace(5), ptr addrspace(5) %8, align 8
  %9 = getelementptr inbounds %SBQueue, ptr addrspace(5) %readtmp7, i32 0, i32 1
  %readtmp8 = load i32, ptr addrspace(5) %9, align 4
  %lttmp = icmp ult i32 %readtmp5, %readtmp8
  %ifcond9 = icmp ne i1 %lttmp, false
  br i1 %ifcond9, label %ifbody10, label %ifmerge11

domerge:                                          ; preds = %ifmerge11
  br label %ifmerge

ifbody10:                                         ; preds = %dobody
  %readtmp12 = load ptr addrspace(5), ptr %sb, align 8
  %10 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp12, i32 0, i32 1
  %readtmp13 = load ptr addrspace(5), ptr addrspace(5) %10, align 8
  %readtmp14 = load i32, ptr %idx, align 4
  %calltmp15 = call ptr addrspace(5) @SBQueue.getEntry(ptr addrspace(5) %readtmp13, i32 %readtmp14)
  %11 = getelementptr inbounds %SBQueueEntry, ptr addrspace(5) %calltmp15, i32 0, i32 1
  %readtmp16 = load ptr addrspace(5), ptr %sb, align 8
  %12 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp16, i32 0, i32 1
  %readtmp17 = load ptr addrspace(5), ptr addrspace(5) %12, align 8
  %readtmp18 = load i32, ptr %idx, align 4
  %calltmp19 = call ptr addrspace(5) @SBQueue.getEntry(ptr addrspace(5) %readtmp17, i32 %readtmp18)
  %calltmp20 = call i64 @SBQueueEntry.getHash(ptr addrspace(5) %calltmp19)
  store i64 %calltmp20, ptr addrspace(5) %11, align 4
  %readtmp21 = load ptr addrspace(5), ptr %sb, align 8
  %13 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp21, i32 0, i32 1
  %readtmp22 = load ptr addrspace(5), ptr addrspace(5) %13, align 8
  %readtmp23 = load i32, ptr %idx, align 4
  %calltmp24 = call ptr addrspace(5) @SBQueue.getEntry(ptr addrspace(5) %readtmp22, i32 %readtmp23)
  %14 = getelementptr inbounds %SBQueueEntry, ptr addrspace(5) %calltmp24, i32 0, i32 0
  %readtmp25 = load ptr addrspace(5), ptr %sb, align 8
  %15 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp25, i32 0, i32 1
  %readtmp26 = load ptr addrspace(5), ptr addrspace(5) %15, align 8
  %readtmp27 = load i32, ptr %idx, align 4
  %calltmp28 = call ptr addrspace(5) @SBQueue.getEntry(ptr addrspace(5) %readtmp26, i32 %readtmp27)
  %16 = getelementptr inbounds %SBQueueEntry, ptr addrspace(5) %calltmp28, i32 0, i32 1
  %readtmp29 = load i64, ptr addrspace(5) %16, align 4
  %readtmp30 = load ptr addrspace(5), ptr %sb, align 8
  %17 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp30, i32 0, i32 0
  %readtmp31 = load ptr addrspace(5), ptr addrspace(5) %17, align 8
  %readtmp32 = load i32, ptr %idx, align 4
  %calltmp33 = call ptr addrspace(5) @SBQueue.getEntry(ptr addrspace(5) %readtmp31, i32 %readtmp32)
  %18 = getelementptr inbounds %SBQueueEntry, ptr addrspace(5) %calltmp33, i32 0, i32 1
  %readtmp34 = load i64, ptr addrspace(5) %18, align 4
  %eqtmp = icmp ne i64 %readtmp34, %readtmp29
  store i1 %eqtmp, ptr addrspace(5) %14, align 1
  br label %ifmerge11

ifmerge11:                                        ; preds = %ifbody10, %dobody
  %readtmp35 = load i32, ptr %idx, align 4
  %addtmp = add i32 %readtmp35, 1
  store i32 %addtmp, ptr %idx, align 4
  %readtmp36 = load i32, ptr %idx, align 4
  %readtmp37 = load ptr addrspace(5), ptr %sb, align 8
  %19 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp37, i32 0, i32 1
  %readtmp38 = load ptr addrspace(5), ptr addrspace(5) %19, align 8
  %20 = getelementptr inbounds %SBQueue, ptr addrspace(5) %readtmp38, i32 0, i32 1
  %readtmp39 = load i32, ptr addrspace(5) %20, align 4
  %lttmp40 = icmp ult i32 %readtmp36, %readtmp39
  %docond = icmp ne i1 %lttmp40, false
  br i1 %docond, label %dobody, label %domerge

ifbody50:                                         ; preds = %ifmerge
  %target = alloca i32, align 4
  %readtmp52 = load ptr addrspace(5), ptr %sb, align 8
  %21 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp52, i32 0, i32 1
  %readtmp53 = load ptr addrspace(5), ptr addrspace(5) %21, align 8
  %22 = getelementptr inbounds %SBQueue, ptr addrspace(5) %readtmp53, i32 0, i32 1
  %readtmp54 = load i32, ptr addrspace(5) %22, align 4
  store i32 %readtmp54, ptr %target, align 4
  %readtmp55 = load i32, ptr %target, align 4
  %readtmp56 = load ptr addrspace(5), ptr %sb, align 8
  %23 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp56, i32 0, i32 3
  %readtmp57 = load i32, ptr addrspace(5) %23, align 4
  %lttmp58 = icmp ult i32 %readtmp55, %readtmp57
  %ifcond59 = icmp ne i1 %lttmp58, false
  br i1 %ifcond59, label %ifbody60, label %ifmerge61

ifmerge51:                                        ; preds = %ifmerge83, %ifmerge
  %ctx = alloca %SBContext, align 8
  %entry97 = alloca ptr addrspace(5), align 8
  %readtmp98 = load ptr addrspace(5), ptr %sb, align 8
  %24 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp98, i32 0, i32 1
  %readtmp99 = load ptr addrspace(5), ptr addrspace(5) %24, align 8
  %25 = getelementptr inbounds %SBQueue, ptr addrspace(5) %readtmp99, i32 0, i32 1
  %readtmp100 = load i32, ptr addrspace(5) %25, align 4
  %eqtmp101 = icmp ne i32 0, %readtmp100
  %ifcond102 = icmp ne i1 %eqtmp101, false
  br i1 %ifcond102, label %ifbody103, label %ifmerge104

ifbody60:                                         ; preds = %ifbody50
  %calltmp62 = call void @printf(ptr @str.3)
  %readtmp63 = load ptr addrspace(5), ptr %sb, align 8
  %26 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp63, i32 0, i32 3
  %readtmp64 = load i32, ptr addrspace(5) %26, align 4
  %readtmp65 = load i32, ptr %target, align 4
  %subtmp = sub i32 %readtmp64, %readtmp65
  %readtmp66 = load ptr addrspace(5), ptr %sb, align 8
  %27 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp66, i32 0, i32 2
  %readtmp67 = load ptr addrspace(5), ptr addrspace(5) %27, align 8
  %readtmp68 = load i32, ptr %target, align 4
  %multmp = mul i32 %readtmp68, ptrtoint (ptr addrspace(64) getelementptr inbounds ([1 x i32], i64 0, i32 1) to i32)
  %calltmp69 = call ptr addrspace(5) @mem.add(ptr addrspace(5) %readtmp67, i32 %multmp)
  %calltmp70 = call void @glDeleteBuffers(i32 %subtmp, ptr addrspace(5) %calltmp69)
  br label %ifmerge61

ifmerge61:                                        ; preds = %ifbody60, %ifbody50
  %readtmp71 = load ptr addrspace(5), ptr %sb, align 8
  %28 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp71, i32 0, i32 2
  %readtmp72 = load ptr addrspace(5), ptr %sb, align 8
  %29 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp72, i32 0, i32 2
  %readtmp73 = load ptr addrspace(5), ptr addrspace(5) %29, align 8
  %readtmp74 = load i32, ptr %target, align 4
  %multmp75 = mul i32 %readtmp74, ptrtoint (ptr addrspace(64) getelementptr inbounds ([1 x i32], i64 0, i32 1) to i32)
  %calltmp76 = call ptr addrspace(5) @realloc(ptr addrspace(5) %readtmp73, i32 %multmp75)
  store ptr addrspace(5) %calltmp76, ptr addrspace(5) %28, align 8
  %readtmp77 = load i32, ptr %target, align 4
  %readtmp78 = load ptr addrspace(5), ptr %sb, align 8
  %30 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp78, i32 0, i32 3
  %readtmp79 = load i32, ptr addrspace(5) %30, align 4
  %lttmp80 = icmp ugt i32 %readtmp77, %readtmp79
  %ifcond81 = icmp ne i1 %lttmp80, false
  br i1 %ifcond81, label %ifbody82, label %ifmerge83

ifbody82:                                         ; preds = %ifmerge61
  %readtmp84 = load i32, ptr %target, align 4
  %readtmp85 = load ptr addrspace(5), ptr %sb, align 8
  %31 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp85, i32 0, i32 3
  %readtmp86 = load i32, ptr addrspace(5) %31, align 4
  %subtmp87 = sub i32 %readtmp84, %readtmp86
  %readtmp88 = load ptr addrspace(5), ptr %sb, align 8
  %32 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp88, i32 0, i32 2
  %readtmp89 = load ptr addrspace(5), ptr addrspace(5) %32, align 8
  %readtmp90 = load ptr addrspace(5), ptr %sb, align 8
  %33 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp90, i32 0, i32 3
  %readtmp91 = load i32, ptr addrspace(5) %33, align 4
  %multmp92 = mul i32 %readtmp91, ptrtoint (ptr addrspace(64) getelementptr inbounds ([1 x i32], i64 0, i32 1) to i32)
  %calltmp93 = call ptr addrspace(5) @mem.add(ptr addrspace(5) %readtmp89, i32 %multmp92)
  %calltmp94 = call void @glGenBuffers(i32 %subtmp87, ptr addrspace(5) %calltmp93)
  br label %ifmerge83

ifmerge83:                                        ; preds = %ifbody82, %ifmerge61
  %readtmp95 = load ptr addrspace(5), ptr %sb, align 8
  %34 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp95, i32 0, i32 3
  %readtmp96 = load i32, ptr %target, align 4
  store i32 %readtmp96, ptr addrspace(5) %34, align 4
  br label %ifmerge51

ifbody103:                                        ; preds = %ifmerge51
  store i32 0, ptr %idx, align 4
  br label %dobody105

ifmerge104:                                       ; preds = %domerge106, %ifmerge51
  %readtmp170 = load ptr addrspace(5), ptr %sb, align 8
  %35 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp170, i32 0, i32 0
  %readtmp171 = load ptr addrspace(5), ptr addrspace(5) %35, align 8
  %36 = getelementptr inbounds %SBQueue, ptr addrspace(5) %readtmp171, i32 0, i32 0
  %readtmp172 = load ptr addrspace(5), ptr addrspace(5) %36, align 8
  %calltmp173 = call void @free(ptr addrspace(5) %readtmp172)
  %readtmp174 = load ptr addrspace(5), ptr %sb, align 8
  %37 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp174, i32 0, i32 0
  %readtmp175 = load ptr addrspace(5), ptr addrspace(5) %37, align 8
  %calltmp176 = call void @free(ptr addrspace(5) %readtmp175)
  %readtmp177 = load ptr addrspace(5), ptr %sb, align 8
  %38 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp177, i32 0, i32 0
  %readtmp178 = load ptr addrspace(5), ptr %sb, align 8
  %39 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp178, i32 0, i32 1
  %readtmp179 = load ptr addrspace(5), ptr addrspace(5) %39, align 8
  store ptr addrspace(5) %readtmp179, ptr addrspace(5) %38, align 8
  %readtmp180 = load ptr addrspace(5), ptr %sb, align 8
  %40 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp180, i32 0, i32 1
  %calltmp181 = call ptr addrspace(5) @malloc(i32 ptrtoint (ptr addrspace(64) getelementptr inbounds ([1 x %SBQueue], i64 0, i32 1) to i32))
  store ptr addrspace(5) %calltmp181, ptr addrspace(5) %40, align 8
  %readtmp182 = load ptr addrspace(5), ptr %sb, align 8
  %41 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp182, i32 0, i32 1
  %readtmp183 = load ptr addrspace(5), ptr addrspace(5) %41, align 8
  %42 = getelementptr inbounds %SBQueue, ptr addrspace(5) %readtmp183, i32 0, i32 0
  %calltmp184 = call ptr addrspace(5) @malloc(i32 10)
  store ptr addrspace(5) %calltmp184, ptr addrspace(5) %42, align 8
  %readtmp185 = load ptr addrspace(5), ptr %sb, align 8
  %43 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp185, i32 0, i32 1
  %readtmp186 = load ptr addrspace(5), ptr addrspace(5) %43, align 8
  %44 = getelementptr inbounds %SBQueue, ptr addrspace(5) %readtmp186, i32 0, i32 1
  store i32 0, ptr addrspace(5) %44, align 4
  ret void

dobody105:                                        ; preds = %ifmerge143, %ifbody103
  %readtmp107 = load ptr addrspace(5), ptr %sb, align 8
  %45 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp107, i32 0, i32 1
  %readtmp108 = load ptr addrspace(5), ptr addrspace(5) %45, align 8
  %readtmp109 = load i32, ptr %idx, align 4
  %calltmp110 = call ptr addrspace(5) @SBQueue.getEntry(ptr addrspace(5) %readtmp108, i32 %readtmp109)
  store ptr addrspace(5) %calltmp110, ptr %entry97, align 8
  %readtmp111 = load %SBContext, ptr %ctx, align 8
  %extracted = extractvalue %SBContext %readtmp111, 0
  %readtmp112 = load ptr addrspace(5), ptr %entry97, align 8
  %46 = getelementptr inbounds %SBQueueEntry, ptr addrspace(5) %readtmp112, i32 0, i32 2
  %readtmp113 = load ptr addrspace(5), ptr addrspace(5) %46, align 8
  %eqtmp114 = icmp ne ptr addrspace(5) %readtmp113, %extracted
  %ifcond115 = icmp ne i1 %eqtmp114, false
  br i1 %ifcond115, label %ifbody116, label %ifmerge117

domerge106:                                       ; preds = %ifmerge143
  br label %ifmerge104

ifbody116:                                        ; preds = %dobody105
  %readtmp118 = load ptr addrspace(5), ptr %entry97, align 8
  %47 = getelementptr inbounds %SBQueueEntry, ptr addrspace(5) %readtmp118, i32 0, i32 2
  %readtmp119 = load ptr addrspace(5), ptr addrspace(5) %47, align 8
  %48 = getelementptr inbounds %Texture, ptr addrspace(5) %readtmp119, i32 0, i32 0
  %readtmp120 = load i32, ptr addrspace(5) %48, align 4
  %calltmp121 = call void @glBindTexture(i32 3553, i32 %readtmp120)
  br label %ifmerge117

ifmerge117:                                       ; preds = %ifbody116, %dobody105
  %49 = getelementptr inbounds %SBContext, ptr %ctx, i32 0, i32 0
  %readtmp122 = load ptr addrspace(5), ptr %sb, align 8
  %50 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp122, i32 0, i32 1
  %readtmp123 = load ptr addrspace(5), ptr addrspace(5) %50, align 8
  %readtmp124 = load i32, ptr %idx, align 4
  %calltmp125 = call ptr addrspace(5) @SBQueue.getEntry(ptr addrspace(5) %readtmp123, i32 %readtmp124)
  %51 = getelementptr inbounds %SBQueueEntry, ptr addrspace(5) %calltmp125, i32 0, i32 2
  %readtmp126 = load ptr addrspace(5), ptr addrspace(5) %51, align 8
  store ptr addrspace(5) %readtmp126, ptr %49, align 8
  %readtmp127 = load ptr addrspace(5), ptr %sb, align 8
  %52 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp127, i32 0, i32 2
  %readtmp128 = load ptr addrspace(5), ptr addrspace(5) %52, align 8
  %readtmp129 = load i32, ptr %idx, align 4
  %multmp130 = mul i32 %readtmp129, ptrtoint (ptr addrspace(64) getelementptr inbounds ([1 x i32], i64 0, i32 1) to i32)
  %calltmp131 = call ptr addrspace(5) @mem.add(ptr addrspace(5) %readtmp128, i32 %multmp130)
  %readtmp132 = load i32, ptr addrspace(5) %calltmp131, align 4
  %calltmp133 = call void @glBindBuffer(i32 34962, i32 %readtmp132)
  %readtmp134 = load ptr addrspace(5), ptr %entry97, align 8
  %53 = getelementptr inbounds %SBQueueEntry, ptr addrspace(5) %readtmp134, i32 0, i32 0
  %readtmp135 = load i1, ptr addrspace(5) %53, align 1
  %readtmp136 = load ptr addrspace(5), ptr %entry97, align 8
  %54 = getelementptr inbounds %SBQueueEntry, ptr addrspace(5) %readtmp136, i32 0, i32 3
  %readtmp137 = load ptr addrspace(5), ptr addrspace(5) %54, align 8
  %55 = getelementptr inbounds %Verts, ptr addrspace(5) %readtmp137, i32 0, i32 1
  %readtmp138 = load i32, ptr addrspace(5) %55, align 4
  %eqtmp139 = icmp ne i32 0, %readtmp138
  %subtmp140 = and i1 %readtmp135, %eqtmp139
  %ifcond141 = icmp ne i1 %subtmp140, false
  br i1 %ifcond141, label %ifbody142, label %ifmerge143

ifbody142:                                        ; preds = %ifmerge117
  %readtmp144 = load ptr addrspace(5), ptr %entry97, align 8
  %56 = getelementptr inbounds %SBQueueEntry, ptr addrspace(5) %readtmp144, i32 0, i32 3
  %readtmp145 = load ptr addrspace(5), ptr addrspace(5) %56, align 8
  %57 = getelementptr inbounds %Verts, ptr addrspace(5) %readtmp145, i32 0, i32 1
  %readtmp146 = load i32, ptr addrspace(5) %57, align 4
  %multmp147 = mul i32 %readtmp146, ptrtoint (ptr addrspace(64) getelementptr inbounds ([1 x %Vert], i64 0, i32 1) to i32)
  %readtmp148 = load ptr addrspace(5), ptr %entry97, align 8
  %58 = getelementptr inbounds %SBQueueEntry, ptr addrspace(5) %readtmp148, i32 0, i32 3
  %readtmp149 = load ptr addrspace(5), ptr addrspace(5) %58, align 8
  %59 = getelementptr inbounds %Verts, ptr addrspace(5) %readtmp149, i32 0, i32 0
  %readtmp150 = load ptr addrspace(5), ptr addrspace(5) %59, align 8
  %calltmp151 = call void @glBufferData(i32 34962, i32 %multmp147, ptr addrspace(5) %readtmp150, i32 35048)
  br label %ifmerge143

ifmerge143:                                       ; preds = %ifbody142, %ifmerge117
  %calltmp152 = call void @glVertexAttribPointer(i32 0, i32 3, i32 5126, i32 0, i32 ptrtoint (ptr addrspace(64) getelementptr inbounds ([1 x %Vert], i64 0, i32 1) to i32), i32 0)
  %calltmp153 = call void @glVertexAttribPointer(i32 1, i32 2, i32 5126, i32 0, i32 ptrtoint (ptr addrspace(64) getelementptr inbounds ([1 x %Vert], i64 0, i32 1) to i32), i32 mul (i32 ptrtoint (ptr addrspace(64) getelementptr inbounds ([1 x float], i64 0, i32 1) to i32), i32 3))
  %calltmp154 = call void @glVertexAttribPointer(i32 2, i32 4, i32 5126, i32 0, i32 ptrtoint (ptr addrspace(64) getelementptr inbounds ([1 x %Vert], i64 0, i32 1) to i32), i32 mul (i32 ptrtoint (ptr addrspace(64) getelementptr inbounds ([1 x float], i64 0, i32 1) to i32), i32 5))
  %calltmp155 = call void @glEnableVertexAttribArray(i32 0)
  %calltmp156 = call void @glEnableVertexAttribArray(i32 1)
  %calltmp157 = call void @glEnableVertexAttribArray(i32 2)
  %readtmp158 = load ptr addrspace(5), ptr %entry97, align 8
  %60 = getelementptr inbounds %SBQueueEntry, ptr addrspace(5) %readtmp158, i32 0, i32 3
  %readtmp159 = load ptr addrspace(5), ptr addrspace(5) %60, align 8
  %61 = getelementptr inbounds %Verts, ptr addrspace(5) %readtmp159, i32 0, i32 1
  %readtmp160 = load i32, ptr addrspace(5) %61, align 4
  %calltmp161 = call void @glDrawArrays(i32 4, i32 0, i32 %readtmp160)
  %readtmp162 = load i32, ptr %idx, align 4
  %addtmp163 = add i32 %readtmp162, 1
  store i32 %addtmp163, ptr %idx, align 4
  %readtmp164 = load i32, ptr %idx, align 4
  %readtmp165 = load ptr addrspace(5), ptr %sb, align 8
  %62 = getelementptr inbounds %SpriteBatch, ptr addrspace(5) %readtmp165, i32 0, i32 1
  %readtmp166 = load ptr addrspace(5), ptr addrspace(5) %62, align 8
  %63 = getelementptr inbounds %SBQueue, ptr addrspace(5) %readtmp166, i32 0, i32 1
  %readtmp167 = load i32, ptr addrspace(5) %63, align 4
  %lttmp168 = icmp ult i32 %readtmp164, %readtmp167
  %docond169 = icmp ne i1 %lttmp168, false
  br i1 %docond169, label %dobody105, label %domerge106
}

define ptr addrspace(5) @Sprite.getVerts(ptr addrspace(5) %0) {
entry:
  %self = alloca ptr addrspace(5), align 8
  store ptr addrspace(5) %0, ptr %self, align 8
  %v = alloca ptr addrspace(5), align 8
  %calltmp = call ptr addrspace(5) @malloc(i32 ptrtoint (ptr addrspace(64) getelementptr inbounds ([1 x %Verts], i64 0, i32 1) to i32))
  store ptr addrspace(5) %calltmp, ptr %v, align 8
  %readtmp = load ptr addrspace(5), ptr %v, align 8
  %1 = getelementptr inbounds %Verts, ptr addrspace(5) %readtmp, i32 0, i32 0
  %calltmp1 = call ptr addrspace(5) @calloc(i32 ptrtoint (ptr addrspace(64) getelementptr inbounds ([1 x %Vert], i64 0, i32 1) to i32), i32 6)
  store ptr addrspace(5) %calltmp1, ptr addrspace(5) %1, align 8
  %readtmp2 = load ptr addrspace(5), ptr %v, align 8
  %2 = getelementptr inbounds %Verts, ptr addrspace(5) %readtmp2, i32 0, i32 1
  store i32 6, ptr addrspace(5) %2, align 4
  %readtmp3 = load ptr addrspace(5), ptr %v, align 8
  %3 = getelementptr inbounds %Verts, ptr addrspace(5) %readtmp3, i32 0, i32 0
  %readtmp4 = load ptr addrspace(5), ptr addrspace(5) %3, align 8
  %elemtemp = getelementptr inbounds [3 x %Vert], ptr addrspace(5) %readtmp4, i32 0, i32 0
  %4 = getelementptr inbounds %Vert, ptr addrspace(5) %elemtemp, i32 0, i32 0
  %readtmp5 = load ptr addrspace(5), ptr %self, align 8
  %5 = getelementptr inbounds %Sprite, ptr addrspace(5) %readtmp5, i32 0, i32 1
  %6 = getelementptr inbounds %Vec2, ptr addrspace(5) %5, i32 0, i32 0
  %readtmp6 = load float, ptr addrspace(5) %6, align 4
  store float %readtmp6, ptr addrspace(5) %4, align 4
  %readtmp7 = load ptr addrspace(5), ptr %v, align 8
  %7 = getelementptr inbounds %Verts, ptr addrspace(5) %readtmp7, i32 0, i32 0
  %readtmp8 = load ptr addrspace(5), ptr addrspace(5) %7, align 8
  %elemtemp9 = getelementptr inbounds [3 x %Vert], ptr addrspace(5) %readtmp8, i32 0, i32 0
  %8 = getelementptr inbounds %Vert, ptr addrspace(5) %elemtemp9, i32 0, i32 1
  %readtmp10 = load ptr addrspace(5), ptr %self, align 8
  %9 = getelementptr inbounds %Sprite, ptr addrspace(5) %readtmp10, i32 0, i32 1
  %10 = getelementptr inbounds %Vec2, ptr addrspace(5) %9, i32 0, i32 1
  %readtmp11 = load float, ptr addrspace(5) %10, align 4
  store float %readtmp11, ptr addrspace(5) %8, align 4
  %readtmp12 = load ptr addrspace(5), ptr %v, align 8
  %11 = getelementptr inbounds %Verts, ptr addrspace(5) %readtmp12, i32 0, i32 0
  %readtmp13 = load ptr addrspace(5), ptr addrspace(5) %11, align 8
  %elemtemp14 = getelementptr inbounds [3 x %Vert], ptr addrspace(5) %readtmp13, i32 0, i32 0
  %12 = getelementptr inbounds %Vert, ptr addrspace(5) %elemtemp14, i32 0, i32 2
  store float 0.000000e+00, ptr addrspace(5) %12, align 4
  %readtmp15 = load ptr addrspace(5), ptr %v, align 8
  %13 = getelementptr inbounds %Verts, ptr addrspace(5) %readtmp15, i32 0, i32 0
  %readtmp16 = load ptr addrspace(5), ptr addrspace(5) %13, align 8
  %elemtemp17 = getelementptr inbounds [3 x %Vert], ptr addrspace(5) %readtmp16, i32 0, i32 0
  %14 = getelementptr inbounds %Vert, ptr addrspace(5) %elemtemp17, i32 0, i32 3
  store float 0.000000e+00, ptr addrspace(5) %14, align 4
  %readtmp18 = load ptr addrspace(5), ptr %v, align 8
  %15 = getelementptr inbounds %Verts, ptr addrspace(5) %readtmp18, i32 0, i32 0
  %readtmp19 = load ptr addrspace(5), ptr addrspace(5) %15, align 8
  %elemtemp20 = getelementptr inbounds [3 x %Vert], ptr addrspace(5) %readtmp19, i32 0, i32 0
  %16 = getelementptr inbounds %Vert, ptr addrspace(5) %elemtemp20, i32 0, i32 4
  store float 0.000000e+00, ptr addrspace(5) %16, align 4
  %readtmp21 = load ptr addrspace(5), ptr %v, align 8
  %17 = getelementptr inbounds %Verts, ptr addrspace(5) %readtmp21, i32 0, i32 0
  %readtmp22 = load ptr addrspace(5), ptr addrspace(5) %17, align 8
  %elemtemp23 = getelementptr inbounds [3 x %Vert], ptr addrspace(5) %readtmp22, i32 0, i32 1
  %18 = getelementptr inbounds %Vert, ptr addrspace(5) %elemtemp23, i32 0, i32 0
  %readtmp24 = load ptr addrspace(5), ptr %self, align 8
  %19 = getelementptr inbounds %Sprite, ptr addrspace(5) %readtmp24, i32 0, i32 1
  %20 = getelementptr inbounds %Vec2, ptr addrspace(5) %19, i32 0, i32 0
  %readtmp25 = load float, ptr addrspace(5) %20, align 4
  %readtmp26 = load ptr addrspace(5), ptr %self, align 8
  %21 = getelementptr inbounds %Sprite, ptr addrspace(5) %readtmp26, i32 0, i32 0
  %22 = getelementptr inbounds %Vec2, ptr addrspace(5) %21, i32 0, i32 0
  %readtmp27 = load float, ptr addrspace(5) %22, align 4
  %addtmp = fadd float %readtmp25, %readtmp27
  store float %addtmp, ptr addrspace(5) %18, align 4
  %readtmp28 = load ptr addrspace(5), ptr %v, align 8
  %23 = getelementptr inbounds %Verts, ptr addrspace(5) %readtmp28, i32 0, i32 0
  %readtmp29 = load ptr addrspace(5), ptr addrspace(5) %23, align 8
  %elemtemp30 = getelementptr inbounds [3 x %Vert], ptr addrspace(5) %readtmp29, i32 0, i32 1
  %24 = getelementptr inbounds %Vert, ptr addrspace(5) %elemtemp30, i32 0, i32 1
  %readtmp31 = load ptr addrspace(5), ptr %self, align 8
  %25 = getelementptr inbounds %Sprite, ptr addrspace(5) %readtmp31, i32 0, i32 1
  %26 = getelementptr inbounds %Vec2, ptr addrspace(5) %25, i32 0, i32 1
  %readtmp32 = load float, ptr addrspace(5) %26, align 4
  %readtmp33 = load ptr addrspace(5), ptr %self, align 8
  %27 = getelementptr inbounds %Sprite, ptr addrspace(5) %readtmp33, i32 0, i32 0
  %28 = getelementptr inbounds %Vec2, ptr addrspace(5) %27, i32 0, i32 1
  %readtmp34 = load float, ptr addrspace(5) %28, align 4
  %addtmp35 = fadd float %readtmp32, %readtmp34
  store float %addtmp35, ptr addrspace(5) %24, align 4
  %readtmp36 = load ptr addrspace(5), ptr %v, align 8
  %29 = getelementptr inbounds %Verts, ptr addrspace(5) %readtmp36, i32 0, i32 0
  %readtmp37 = load ptr addrspace(5), ptr addrspace(5) %29, align 8
  %elemtemp38 = getelementptr inbounds [3 x %Vert], ptr addrspace(5) %readtmp37, i32 0, i32 1
  %30 = getelementptr inbounds %Vert, ptr addrspace(5) %elemtemp38, i32 0, i32 2
  store float 0.000000e+00, ptr addrspace(5) %30, align 4
  %readtmp39 = load ptr addrspace(5), ptr %v, align 8
  %31 = getelementptr inbounds %Verts, ptr addrspace(5) %readtmp39, i32 0, i32 0
  %readtmp40 = load ptr addrspace(5), ptr addrspace(5) %31, align 8
  %elemtemp41 = getelementptr inbounds [3 x %Vert], ptr addrspace(5) %readtmp40, i32 0, i32 1
  %32 = getelementptr inbounds %Vert, ptr addrspace(5) %elemtemp41, i32 0, i32 3
  store float 1.000000e+00, ptr addrspace(5) %32, align 4
  %readtmp42 = load ptr addrspace(5), ptr %v, align 8
  %33 = getelementptr inbounds %Verts, ptr addrspace(5) %readtmp42, i32 0, i32 0
  %readtmp43 = load ptr addrspace(5), ptr addrspace(5) %33, align 8
  %elemtemp44 = getelementptr inbounds [3 x %Vert], ptr addrspace(5) %readtmp43, i32 0, i32 1
  %34 = getelementptr inbounds %Vert, ptr addrspace(5) %elemtemp44, i32 0, i32 4
  store float 1.000000e+00, ptr addrspace(5) %34, align 4
  %readtmp45 = load ptr addrspace(5), ptr %v, align 8
  %35 = getelementptr inbounds %Verts, ptr addrspace(5) %readtmp45, i32 0, i32 0
  %readtmp46 = load ptr addrspace(5), ptr addrspace(5) %35, align 8
  %elemtemp47 = getelementptr inbounds [3 x %Vert], ptr addrspace(5) %readtmp46, i32 0, i32 2
  %36 = getelementptr inbounds %Vert, ptr addrspace(5) %elemtemp47, i32 0, i32 0
  %readtmp48 = load ptr addrspace(5), ptr %self, align 8
  %37 = getelementptr inbounds %Sprite, ptr addrspace(5) %readtmp48, i32 0, i32 1
  %38 = getelementptr inbounds %Vec2, ptr addrspace(5) %37, i32 0, i32 0
  %readtmp49 = load float, ptr addrspace(5) %38, align 4
  store float %readtmp49, ptr addrspace(5) %36, align 4
  %readtmp50 = load ptr addrspace(5), ptr %v, align 8
  %39 = getelementptr inbounds %Verts, ptr addrspace(5) %readtmp50, i32 0, i32 0
  %readtmp51 = load ptr addrspace(5), ptr addrspace(5) %39, align 8
  %elemtemp52 = getelementptr inbounds [3 x %Vert], ptr addrspace(5) %readtmp51, i32 0, i32 2
  %40 = getelementptr inbounds %Vert, ptr addrspace(5) %elemtemp52, i32 0, i32 1
  %readtmp53 = load ptr addrspace(5), ptr %self, align 8
  %41 = getelementptr inbounds %Sprite, ptr addrspace(5) %readtmp53, i32 0, i32 1
  %42 = getelementptr inbounds %Vec2, ptr addrspace(5) %41, i32 0, i32 1
  %readtmp54 = load float, ptr addrspace(5) %42, align 4
  %readtmp55 = load ptr addrspace(5), ptr %self, align 8
  %43 = getelementptr inbounds %Sprite, ptr addrspace(5) %readtmp55, i32 0, i32 0
  %44 = getelementptr inbounds %Vec2, ptr addrspace(5) %43, i32 0, i32 1
  %readtmp56 = load float, ptr addrspace(5) %44, align 4
  %addtmp57 = fadd float %readtmp54, %readtmp56
  store float %addtmp57, ptr addrspace(5) %40, align 4
  %readtmp58 = load ptr addrspace(5), ptr %v, align 8
  %45 = getelementptr inbounds %Verts, ptr addrspace(5) %readtmp58, i32 0, i32 0
  %readtmp59 = load ptr addrspace(5), ptr addrspace(5) %45, align 8
  %elemtemp60 = getelementptr inbounds [3 x %Vert], ptr addrspace(5) %readtmp59, i32 0, i32 2
  %46 = getelementptr inbounds %Vert, ptr addrspace(5) %elemtemp60, i32 0, i32 2
  store float 0.000000e+00, ptr addrspace(5) %46, align 4
  %readtmp61 = load ptr addrspace(5), ptr %v, align 8
  %47 = getelementptr inbounds %Verts, ptr addrspace(5) %readtmp61, i32 0, i32 0
  %readtmp62 = load ptr addrspace(5), ptr addrspace(5) %47, align 8
  %elemtemp63 = getelementptr inbounds [3 x %Vert], ptr addrspace(5) %readtmp62, i32 0, i32 2
  %48 = getelementptr inbounds %Vert, ptr addrspace(5) %elemtemp63, i32 0, i32 3
  store float 0.000000e+00, ptr addrspace(5) %48, align 4
  %readtmp64 = load ptr addrspace(5), ptr %v, align 8
  %49 = getelementptr inbounds %Verts, ptr addrspace(5) %readtmp64, i32 0, i32 0
  %readtmp65 = load ptr addrspace(5), ptr addrspace(5) %49, align 8
  %elemtemp66 = getelementptr inbounds [3 x %Vert], ptr addrspace(5) %readtmp65, i32 0, i32 2
  %50 = getelementptr inbounds %Vert, ptr addrspace(5) %elemtemp66, i32 0, i32 4
  store float 1.000000e+00, ptr addrspace(5) %50, align 4
  %readtmp67 = load ptr addrspace(5), ptr %v, align 8
  %51 = getelementptr inbounds %Verts, ptr addrspace(5) %readtmp67, i32 0, i32 0
  %readtmp68 = load ptr addrspace(5), ptr addrspace(5) %51, align 8
  %elemtemp69 = getelementptr inbounds [3 x %Vert], ptr addrspace(5) %readtmp68, i32 0, i32 3
  %52 = getelementptr inbounds %Vert, ptr addrspace(5) %elemtemp69, i32 0, i32 0
  %readtmp70 = load ptr addrspace(5), ptr %self, align 8
  %53 = getelementptr inbounds %Sprite, ptr addrspace(5) %readtmp70, i32 0, i32 1
  %54 = getelementptr inbounds %Vec2, ptr addrspace(5) %53, i32 0, i32 0
  %readtmp71 = load float, ptr addrspace(5) %54, align 4
  store float %readtmp71, ptr addrspace(5) %52, align 4
  %readtmp72 = load ptr addrspace(5), ptr %v, align 8
  %55 = getelementptr inbounds %Verts, ptr addrspace(5) %readtmp72, i32 0, i32 0
  %readtmp73 = load ptr addrspace(5), ptr addrspace(5) %55, align 8
  %elemtemp74 = getelementptr inbounds [3 x %Vert], ptr addrspace(5) %readtmp73, i32 0, i32 3
  %56 = getelementptr inbounds %Vert, ptr addrspace(5) %elemtemp74, i32 0, i32 1
  %readtmp75 = load ptr addrspace(5), ptr %self, align 8
  %57 = getelementptr inbounds %Sprite, ptr addrspace(5) %readtmp75, i32 0, i32 1
  %58 = getelementptr inbounds %Vec2, ptr addrspace(5) %57, i32 0, i32 1
  %readtmp76 = load float, ptr addrspace(5) %58, align 4
  store float %readtmp76, ptr addrspace(5) %56, align 4
  %readtmp77 = load ptr addrspace(5), ptr %v, align 8
  %59 = getelementptr inbounds %Verts, ptr addrspace(5) %readtmp77, i32 0, i32 0
  %readtmp78 = load ptr addrspace(5), ptr addrspace(5) %59, align 8
  %elemtemp79 = getelementptr inbounds [3 x %Vert], ptr addrspace(5) %readtmp78, i32 0, i32 3
  %60 = getelementptr inbounds %Vert, ptr addrspace(5) %elemtemp79, i32 0, i32 2
  store float 0.000000e+00, ptr addrspace(5) %60, align 4
  %readtmp80 = load ptr addrspace(5), ptr %v, align 8
  %61 = getelementptr inbounds %Verts, ptr addrspace(5) %readtmp80, i32 0, i32 0
  %readtmp81 = load ptr addrspace(5), ptr addrspace(5) %61, align 8
  %elemtemp82 = getelementptr inbounds [3 x %Vert], ptr addrspace(5) %readtmp81, i32 0, i32 3
  %62 = getelementptr inbounds %Vert, ptr addrspace(5) %elemtemp82, i32 0, i32 3
  store float 0.000000e+00, ptr addrspace(5) %62, align 4
  %readtmp83 = load ptr addrspace(5), ptr %v, align 8
  %63 = getelementptr inbounds %Verts, ptr addrspace(5) %readtmp83, i32 0, i32 0
  %readtmp84 = load ptr addrspace(5), ptr addrspace(5) %63, align 8
  %elemtemp85 = getelementptr inbounds [3 x %Vert], ptr addrspace(5) %readtmp84, i32 0, i32 3
  %64 = getelementptr inbounds %Vert, ptr addrspace(5) %elemtemp85, i32 0, i32 4
  store float 0.000000e+00, ptr addrspace(5) %64, align 4
  %readtmp86 = load ptr addrspace(5), ptr %v, align 8
  %65 = getelementptr inbounds %Verts, ptr addrspace(5) %readtmp86, i32 0, i32 0
  %readtmp87 = load ptr addrspace(5), ptr addrspace(5) %65, align 8
  %elemtemp88 = getelementptr inbounds [3 x %Vert], ptr addrspace(5) %readtmp87, i32 0, i32 4
  %66 = getelementptr inbounds %Vert, ptr addrspace(5) %elemtemp88, i32 0, i32 0
  %readtmp89 = load ptr addrspace(5), ptr %self, align 8
  %67 = getelementptr inbounds %Sprite, ptr addrspace(5) %readtmp89, i32 0, i32 1
  %68 = getelementptr inbounds %Vec2, ptr addrspace(5) %67, i32 0, i32 0
  %readtmp90 = load float, ptr addrspace(5) %68, align 4
  %readtmp91 = load ptr addrspace(5), ptr %self, align 8
  %69 = getelementptr inbounds %Sprite, ptr addrspace(5) %readtmp91, i32 0, i32 0
  %70 = getelementptr inbounds %Vec2, ptr addrspace(5) %69, i32 0, i32 0
  %readtmp92 = load float, ptr addrspace(5) %70, align 4
  %addtmp93 = fadd float %readtmp90, %readtmp92
  store float %addtmp93, ptr addrspace(5) %66, align 4
  %readtmp94 = load ptr addrspace(5), ptr %v, align 8
  %71 = getelementptr inbounds %Verts, ptr addrspace(5) %readtmp94, i32 0, i32 0
  %readtmp95 = load ptr addrspace(5), ptr addrspace(5) %71, align 8
  %elemtemp96 = getelementptr inbounds [3 x %Vert], ptr addrspace(5) %readtmp95, i32 0, i32 4
  %72 = getelementptr inbounds %Vert, ptr addrspace(5) %elemtemp96, i32 0, i32 1
  %readtmp97 = load ptr addrspace(5), ptr %self, align 8
  %73 = getelementptr inbounds %Sprite, ptr addrspace(5) %readtmp97, i32 0, i32 1
  %74 = getelementptr inbounds %Vec2, ptr addrspace(5) %73, i32 0, i32 1
  %readtmp98 = load float, ptr addrspace(5) %74, align 4
  %readtmp99 = load ptr addrspace(5), ptr %self, align 8
  %75 = getelementptr inbounds %Sprite, ptr addrspace(5) %readtmp99, i32 0, i32 0
  %76 = getelementptr inbounds %Vec2, ptr addrspace(5) %75, i32 0, i32 1
  %readtmp100 = load float, ptr addrspace(5) %76, align 4
  %addtmp101 = fadd float %readtmp98, %readtmp100
  store float %addtmp101, ptr addrspace(5) %72, align 4
  %readtmp102 = load ptr addrspace(5), ptr %v, align 8
  %77 = getelementptr inbounds %Verts, ptr addrspace(5) %readtmp102, i32 0, i32 0
  %readtmp103 = load ptr addrspace(5), ptr addrspace(5) %77, align 8
  %elemtemp104 = getelementptr inbounds [3 x %Vert], ptr addrspace(5) %readtmp103, i32 0, i32 4
  %78 = getelementptr inbounds %Vert, ptr addrspace(5) %elemtemp104, i32 0, i32 2
  store float 0.000000e+00, ptr addrspace(5) %78, align 4
  %readtmp105 = load ptr addrspace(5), ptr %v, align 8
  %79 = getelementptr inbounds %Verts, ptr addrspace(5) %readtmp105, i32 0, i32 0
  %readtmp106 = load ptr addrspace(5), ptr addrspace(5) %79, align 8
  %elemtemp107 = getelementptr inbounds [3 x %Vert], ptr addrspace(5) %readtmp106, i32 0, i32 4
  %80 = getelementptr inbounds %Vert, ptr addrspace(5) %elemtemp107, i32 0, i32 3
  store float 1.000000e+00, ptr addrspace(5) %80, align 4
  %readtmp108 = load ptr addrspace(5), ptr %v, align 8
  %81 = getelementptr inbounds %Verts, ptr addrspace(5) %readtmp108, i32 0, i32 0
  %readtmp109 = load ptr addrspace(5), ptr addrspace(5) %81, align 8
  %elemtemp110 = getelementptr inbounds [3 x %Vert], ptr addrspace(5) %readtmp109, i32 0, i32 4
  %82 = getelementptr inbounds %Vert, ptr addrspace(5) %elemtemp110, i32 0, i32 4
  store float 1.000000e+00, ptr addrspace(5) %82, align 4
  %readtmp111 = load ptr addrspace(5), ptr %v, align 8
  %83 = getelementptr inbounds %Verts, ptr addrspace(5) %readtmp111, i32 0, i32 0
  %readtmp112 = load ptr addrspace(5), ptr addrspace(5) %83, align 8
  %elemtemp113 = getelementptr inbounds [3 x %Vert], ptr addrspace(5) %readtmp112, i32 0, i32 5
  %84 = getelementptr inbounds %Vert, ptr addrspace(5) %elemtemp113, i32 0, i32 0
  %readtmp114 = load ptr addrspace(5), ptr %self, align 8
  %85 = getelementptr inbounds %Sprite, ptr addrspace(5) %readtmp114, i32 0, i32 1
  %86 = getelementptr inbounds %Vec2, ptr addrspace(5) %85, i32 0, i32 0
  %readtmp115 = load float, ptr addrspace(5) %86, align 4
  %readtmp116 = load ptr addrspace(5), ptr %self, align 8
  %87 = getelementptr inbounds %Sprite, ptr addrspace(5) %readtmp116, i32 0, i32 0
  %88 = getelementptr inbounds %Vec2, ptr addrspace(5) %87, i32 0, i32 0
  %readtmp117 = load float, ptr addrspace(5) %88, align 4
  %addtmp118 = fadd float %readtmp115, %readtmp117
  store float %addtmp118, ptr addrspace(5) %84, align 4
  %readtmp119 = load ptr addrspace(5), ptr %v, align 8
  %89 = getelementptr inbounds %Verts, ptr addrspace(5) %readtmp119, i32 0, i32 0
  %readtmp120 = load ptr addrspace(5), ptr addrspace(5) %89, align 8
  %elemtemp121 = getelementptr inbounds [3 x %Vert], ptr addrspace(5) %readtmp120, i32 0, i32 5
  %90 = getelementptr inbounds %Vert, ptr addrspace(5) %elemtemp121, i32 0, i32 1
  %readtmp122 = load ptr addrspace(5), ptr %self, align 8
  %91 = getelementptr inbounds %Sprite, ptr addrspace(5) %readtmp122, i32 0, i32 1
  %92 = getelementptr inbounds %Vec2, ptr addrspace(5) %91, i32 0, i32 1
  %readtmp123 = load float, ptr addrspace(5) %92, align 4
  store float %readtmp123, ptr addrspace(5) %90, align 4
  %readtmp124 = load ptr addrspace(5), ptr %v, align 8
  %93 = getelementptr inbounds %Verts, ptr addrspace(5) %readtmp124, i32 0, i32 0
  %readtmp125 = load ptr addrspace(5), ptr addrspace(5) %93, align 8
  %elemtemp126 = getelementptr inbounds [3 x %Vert], ptr addrspace(5) %readtmp125, i32 0, i32 5
  %94 = getelementptr inbounds %Vert, ptr addrspace(5) %elemtemp126, i32 0, i32 2
  store float 0.000000e+00, ptr addrspace(5) %94, align 4
  %readtmp127 = load ptr addrspace(5), ptr %v, align 8
  %95 = getelementptr inbounds %Verts, ptr addrspace(5) %readtmp127, i32 0, i32 0
  %readtmp128 = load ptr addrspace(5), ptr addrspace(5) %95, align 8
  %elemtemp129 = getelementptr inbounds [3 x %Vert], ptr addrspace(5) %readtmp128, i32 0, i32 5
  %96 = getelementptr inbounds %Vert, ptr addrspace(5) %elemtemp129, i32 0, i32 3
  store float 1.000000e+00, ptr addrspace(5) %96, align 4
  %readtmp130 = load ptr addrspace(5), ptr %v, align 8
  %97 = getelementptr inbounds %Verts, ptr addrspace(5) %readtmp130, i32 0, i32 0
  %readtmp131 = load ptr addrspace(5), ptr addrspace(5) %97, align 8
  %elemtemp132 = getelementptr inbounds [3 x %Vert], ptr addrspace(5) %readtmp131, i32 0, i32 5
  %98 = getelementptr inbounds %Vert, ptr addrspace(5) %elemtemp132, i32 0, i32 4
  store float 0.000000e+00, ptr addrspace(5) %98, align 4
  %readtmp133 = load ptr addrspace(5), ptr %v, align 8
  ret ptr addrspace(5) %readtmp133
}

define ptr addrspace(5) @getShaders() {
entry:
  %result = alloca ptr addrspace(5), align 8
  %calltmp = call ptr addrspace(5) @calloc(i32 ptrtoint (ptr addrspace(64) getelementptr inbounds ([1 x %ShaderFile], i64 0, i32 1) to i32), i32 2)
  store ptr addrspace(5) %calltmp, ptr %result, align 8
  %readtmp = load ptr addrspace(5), ptr %result, align 8
  %elemtemp = getelementptr inbounds [1 x %ShaderFile], ptr addrspace(5) %readtmp, i32 0, i32 0
  %0 = getelementptr inbounds %ShaderFile, ptr addrspace(5) %elemtemp, i32 0, i32 0
  %calltmp1 = call ptr addrspace(5) @calloc(i32 ptrtoint (ptr addrspace(64) getelementptr inbounds ([1 x ptr addrspace(5)], i64 0, i32 1) to i32), i32 1)
  store ptr addrspace(5) %calltmp1, ptr addrspace(5) %0, align 8
  %readtmp2 = load ptr addrspace(5), ptr %result, align 8
  %elemtemp3 = getelementptr inbounds [1 x %ShaderFile], ptr addrspace(5) %readtmp2, i32 0, i32 0
  %1 = getelementptr inbounds %ShaderFile, ptr addrspace(5) %elemtemp3, i32 0, i32 2
  store i32 35633, ptr addrspace(5) %1, align 4
  %readtmp4 = load ptr addrspace(5), ptr %result, align 8
  %elemtemp5 = getelementptr inbounds [1 x %ShaderFile], ptr addrspace(5) %readtmp4, i32 0, i32 0
  %2 = getelementptr inbounds %ShaderFile, ptr addrspace(5) %elemtemp5, i32 0, i32 1
  store i32 1, ptr addrspace(5) %2, align 4
  %readtmp6 = load ptr addrspace(5), ptr %result, align 8
  %elemtemp7 = getelementptr inbounds [1 x %ShaderFile], ptr addrspace(5) %readtmp6, i32 0, i32 0
  %3 = getelementptr inbounds %ShaderFile, ptr addrspace(5) %elemtemp7, i32 0, i32 0
  %readtmp8 = load ptr addrspace(5), ptr addrspace(5) %3, align 8
  store ptr @str.4, ptr addrspace(5) %readtmp8, align 8
  %readtmp9 = load ptr addrspace(5), ptr %result, align 8
  %elemtemp10 = getelementptr inbounds [1 x %ShaderFile], ptr addrspace(5) %readtmp9, i32 0, i32 1
  %4 = getelementptr inbounds %ShaderFile, ptr addrspace(5) %elemtemp10, i32 0, i32 0
  %calltmp11 = call ptr addrspace(5) @calloc(i32 ptrtoint (ptr addrspace(64) getelementptr inbounds ([1 x ptr addrspace(5)], i64 0, i32 1) to i32), i32 1)
  store ptr addrspace(5) %calltmp11, ptr addrspace(5) %4, align 8
  %readtmp12 = load ptr addrspace(5), ptr %result, align 8
  %elemtemp13 = getelementptr inbounds [1 x %ShaderFile], ptr addrspace(5) %readtmp12, i32 0, i32 1
  %5 = getelementptr inbounds %ShaderFile, ptr addrspace(5) %elemtemp13, i32 0, i32 2
  store i32 35632, ptr addrspace(5) %5, align 4
  %readtmp14 = load ptr addrspace(5), ptr %result, align 8
  %elemtemp15 = getelementptr inbounds [1 x %ShaderFile], ptr addrspace(5) %readtmp14, i32 0, i32 1
  %6 = getelementptr inbounds %ShaderFile, ptr addrspace(5) %elemtemp15, i32 0, i32 1
  store i32 1, ptr addrspace(5) %6, align 4
  %readtmp16 = load ptr addrspace(5), ptr %result, align 8
  %elemtemp17 = getelementptr inbounds [1 x %ShaderFile], ptr addrspace(5) %readtmp16, i32 0, i32 1
  %7 = getelementptr inbounds %ShaderFile, ptr addrspace(5) %elemtemp17, i32 0, i32 0
  %readtmp18 = load ptr addrspace(5), ptr addrspace(5) %7, align 8
  store ptr @str.5, ptr addrspace(5) %readtmp18, align 8
  %readtmp19 = load ptr addrspace(5), ptr %result, align 8
  ret ptr addrspace(5) %readtmp19
}

define i32 @main() {
entry:
  %sb = alloca %SpriteBatch, align 8
  %drawer = alloca %Drawer, align 8
  %sprite = alloca %Sprite, align 8
  %ctx = alloca ptr addrspace(5), align 8
  %shd = alloca ptr addrspace(5), align 8
  %tex = alloca ptr addrspace(5), align 8
  %calltmp = call ptr addrspace(5) @GFXContext.init()
  store ptr addrspace(5) %calltmp, ptr %ctx, align 8
  %calltmp1 = call ptr addrspace(5) @getShaders()
  %calltmp2 = call ptr addrspace(5) @"Shader.newptr addrspace(!"(ptr addrspace(5) %calltmp1, i32 2)
  store ptr addrspace(5) %calltmp2, ptr %shd, align 8
  %calltmp3 = call ptr addrspace(5) @"Texture.newtx, align 8\0A \91\02"(ptr @str.6)
  store ptr addrspace(5) %calltmp3, ptr %tex, align 8
  %readtmp = load ptr addrspace(5), ptr %shd, align 8
  %calltmp4 = call %Vec2 @Vec2.new(float 6.400000e+02, float 4.800000e+02)
  %calltmp5 = call void @"Shader.setSizeptr addrsp\91\02"(ptr addrspace(5) %readtmp, %Vec2 %calltmp4)
  %0 = getelementptr inbounds %Drawer, ptr %drawer, i32 0, i32 2
  store ptr %sprite, ptr %0, align 8
  %1 = getelementptr inbounds %Drawer, ptr %drawer, i32 0, i32 0
  store ptr @Sprite.getVerts, ptr %1, align 8
  %2 = getelementptr inbounds %Drawer, ptr %drawer, i32 0, i32 1
  %readtmp6 = load ptr addrspace(5), ptr %tex, align 8
  store ptr addrspace(5) %readtmp6, ptr %2, align 8
  %calltmp7 = call void @SpriteBatch.init(ptr %sb)
  %3 = getelementptr inbounds %Sprite, ptr %sprite, i32 0, i32 0
  %4 = getelementptr inbounds %Vec2, ptr %3, i32 0, i32 0
  store float 1.000000e+02, ptr %4, align 4
  %5 = getelementptr inbounds %Sprite, ptr %sprite, i32 0, i32 0
  %6 = getelementptr inbounds %Vec2, ptr %5, i32 0, i32 1
  store float 4.000000e+01, ptr %6, align 4
  %7 = getelementptr inbounds %Sprite, ptr %sprite, i32 0, i32 1
  %8 = getelementptr inbounds %Vec2, ptr %7, i32 0, i32 0
  store float 1.000000e+02, ptr %8, align 4
  %9 = getelementptr inbounds %Sprite, ptr %sprite, i32 0, i32 1
  %10 = getelementptr inbounds %Vec2, ptr %9, i32 0, i32 1
  store float 1.000000e+02, ptr %10, align 4
  %vel = alloca %Vec2, align 8
  %11 = getelementptr inbounds %Vec2, ptr %vel, i32 0, i32 0
  store float -1.000000e+00, ptr %11, align 4
  %12 = getelementptr inbounds %Vec2, ptr %vel, i32 0, i32 1
  store float -1.000000e+00, ptr %12, align 4
  br label %dobody

dobody:                                           ; preds = %ifmerge51, %entry
  %calltmp8 = call void @SpriteBatch.draw(ptr %sb, ptr %drawer)
  %readtmp9 = load ptr addrspace(5), ptr %ctx, align 8
  %calltmp10 = call void @GFXContext.clear(ptr addrspace(5) %readtmp9)
  %readtmp11 = load ptr addrspace(5), ptr %shd, align 8
  %13 = getelementptr inbounds %Shader, ptr addrspace(5) %readtmp11, i32 0, i32 0
  %readtmp12 = load i32, ptr addrspace(5) %13, align 4
  %calltmp13 = call void @glUseProgram(i32 %readtmp12)
  %calltmp14 = call void @SpriteBatch.finish(ptr %sb)
  %readtmp15 = load ptr addrspace(5), ptr %ctx, align 8
  %calltmp16 = call void @GFXContext.swap(ptr addrspace(5) %readtmp15)
  %14 = getelementptr inbounds %Sprite, ptr %sprite, i32 0, i32 1
  %15 = getelementptr inbounds %Vec2, ptr %14, i32 0, i32 0
  %16 = getelementptr inbounds %Sprite, ptr %sprite, i32 0, i32 1
  %17 = getelementptr inbounds %Vec2, ptr %16, i32 0, i32 0
  %readtmp17 = load float, ptr %17, align 4
  %readtmp18 = load %Vec2, ptr %vel, align 4
  %extracted = extractvalue %Vec2 %readtmp18, 0
  %addtmp = fadd float %readtmp17, %extracted
  store float %addtmp, ptr %15, align 4
  %18 = getelementptr inbounds %Sprite, ptr %sprite, i32 0, i32 1
  %19 = getelementptr inbounds %Vec2, ptr %18, i32 0, i32 1
  %20 = getelementptr inbounds %Sprite, ptr %sprite, i32 0, i32 1
  %21 = getelementptr inbounds %Vec2, ptr %20, i32 0, i32 1
  %readtmp19 = load float, ptr %21, align 4
  %readtmp20 = load %Vec2, ptr %vel, align 4
  %extracted21 = extractvalue %Vec2 %readtmp20, 1
  %addtmp22 = fadd float %readtmp19, %extracted21
  store float %addtmp22, ptr %19, align 4
  %readtmp23 = load %Sprite, ptr %sprite, align 4
  %extracted24 = extractvalue %Sprite %readtmp23, 1
  %extracted25 = extractvalue %Vec2 %extracted24, 0
  %lttmp = fcmp ult float %extracted25, 0.000000e+00
  %ifcond = icmp ne i1 %lttmp, false
  br i1 %ifcond, label %ifbody, label %ifmerge

domerge:                                          ; preds = %ifmerge51
  %calltmp56 = call void @SpriteBatch.deinit(ptr %sb)
  %readtmp57 = load ptr addrspace(5), ptr %ctx, align 8
  %calltmp58 = call void @GFXContext.free(ptr addrspace(5) %readtmp57)
  %calltmp59 = call void @printf(ptr @str.7)
  ret i32 0

ifbody:                                           ; preds = %dobody
  %22 = getelementptr inbounds %Vec2, ptr %vel, i32 0, i32 0
  %23 = getelementptr inbounds %Vec2, ptr %vel, i32 0, i32 0
  %readtmp26 = load float, ptr %23, align 4
  %multmp = fmul float %readtmp26, -1.000000e+00
  store float %multmp, ptr %22, align 4
  br label %ifmerge

ifmerge:                                          ; preds = %ifbody, %dobody
  %readtmp27 = load %Sprite, ptr %sprite, align 4
  %extracted28 = extractvalue %Sprite %readtmp27, 1
  %extracted29 = extractvalue %Vec2 %extracted28, 1
  %lttmp30 = fcmp ult float %extracted29, 0.000000e+00
  %ifcond31 = icmp ne i1 %lttmp30, false
  br i1 %ifcond31, label %ifbody32, label %ifmerge33

ifbody32:                                         ; preds = %ifmerge
  %24 = getelementptr inbounds %Vec2, ptr %vel, i32 0, i32 1
  %25 = getelementptr inbounds %Vec2, ptr %vel, i32 0, i32 1
  %readtmp34 = load float, ptr %25, align 4
  %multmp35 = fmul float %readtmp34, -1.000000e+00
  store float %multmp35, ptr %24, align 4
  br label %ifmerge33

ifmerge33:                                        ; preds = %ifbody32, %ifmerge
  %readtmp36 = load %Sprite, ptr %sprite, align 4
  %extracted37 = extractvalue %Sprite %readtmp36, 1
  %extracted38 = extractvalue %Vec2 %extracted37, 0
  %lttmp39 = icmp ugt float %extracted38, 5.400000e+02
  %ifcond40 = icmp ne i1 %lttmp39, false
  br i1 %ifcond40, label %ifbody41, label %ifmerge42

ifbody41:                                         ; preds = %ifmerge33
  %26 = getelementptr inbounds %Vec2, ptr %vel, i32 0, i32 0
  %27 = getelementptr inbounds %Vec2, ptr %vel, i32 0, i32 0
  %readtmp43 = load float, ptr %27, align 4
  %multmp44 = fmul float %readtmp43, -1.000000e+00
  store float %multmp44, ptr %26, align 4
  br label %ifmerge42

ifmerge42:                                        ; preds = %ifbody41, %ifmerge33
  %readtmp45 = load %Sprite, ptr %sprite, align 4
  %extracted46 = extractvalue %Sprite %readtmp45, 1
  %extracted47 = extractvalue %Vec2 %extracted46, 1
  %lttmp48 = icmp ugt float %extracted47, 4.400000e+02
  %ifcond49 = icmp ne i1 %lttmp48, false
  br i1 %ifcond49, label %ifbody50, label %ifmerge51

ifbody50:                                         ; preds = %ifmerge42
  %28 = getelementptr inbounds %Vec2, ptr %vel, i32 0, i32 1
  %29 = getelementptr inbounds %Vec2, ptr %vel, i32 0, i32 1
  %readtmp52 = load float, ptr %29, align 4
  %multmp53 = fmul float %readtmp52, -1.000000e+00
  store float %multmp53, ptr %28, align 4
  br label %ifmerge51

ifmerge51:                                        ; preds = %ifbody50, %ifmerge42
  %readtmp54 = load ptr addrspace(5), ptr %ctx, align 8
  %calltmp55 = call i1 @GFXContext.poll(ptr addrspace(5) %readtmp54)
  %docond = icmp ne i1 %calltmp55, false
  br i1 %docond, label %dobody, label %domerge
}
