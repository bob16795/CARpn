def proc getTexShaders : ShaderFile$* {
  ShaderFile$* result

  result ShaderFile.SIZE i32' 2 calloc =

  result@[0].contents u8$*$*.SIZE i32' 1 calloc =
  result@[0].kind 35633 =
  result@[0].count 1 =
  result@[0].contents@ u8$**'
  "
precision highp float;
attribute vec3 aVertex;
attribute vec2 aTexCoords;
attribute vec4 aColor;
uniform mat4 projection;
varying vec2 texCoords;
varying vec4 tintColor;
void main()
{
    gl_Position = projection * vec4(aVertex.xyz, 1.0);
    texCoords = aTexCoords;
    tintColor = aColor;
}" =

  result@[1].contents u8$*$*.SIZE i32' 1 calloc =
  result@[1].kind 35632 =
  result@[1].count 1 =
  result@[1].contents@ u8$**'
  "
precision highp float;

varying vec2 texCoords;
varying vec4 tintColor;

uniform sampler2D tex;

void main() {
  gl_FragColor = texture2D(tex, texCoords);
}" =

  result@
}

def proc getPixShaders : ShaderFile$* {
  ShaderFile$* result

  result ShaderFile.SIZE i32' 2 calloc =

  result@[0].contents u8$*$*.SIZE i32' 1 calloc =
  result@[0].kind 35633 =
  result@[0].count 1 =
  result@[0].contents@ u8$**'
  "
precision highp float;
attribute vec3 aVertex;
attribute vec2 aTexCoords;
attribute vec4 aColor;
uniform mat4 projection;
varying vec2 texCoords;
varying vec4 tintColor;
void main()
{
    gl_Position = projection * vec4(aVertex.xyz, 1.0);
    texCoords = aTexCoords;
    tintColor = aColor;
}" =

  result@[1].contents u8$*$*.SIZE i32' 1 calloc =
  result@[1].kind 35632 =
  result@[1].count 1 =
  result@[1].contents@ u8$**'
  "
precision highp float;

varying vec2 texCoords;
varying vec4 tintColor;

uniform sampler2D tex;

void main() {
     gl_FragColor = tintColor;
}" =

  result@
}

extern proc getTimeFloat : f32
fntype proc loopfn : void
extern proc emscripten_set_main_loop loopfn : void

global gt f32
global gdt f32
global gcurrentTime f32
global gaccumulator f32
global gcurrState GameState
global gprevState GameState
global gsb SpriteBatch
global gctx GFXContext*

def proc main : i32 {
  Shader* [2] shd

  gctx GFXContext.init =
  gctx@ Input.init

  shd [0] getTexShaders 2 Shader.new =
  shd [1] getPixShaders 2 Shader.new =

  shd [0] @ Shader*' 640.0 480.0 Vec2.new Shader.setSize
  shd [1] @ Shader*' 640.0 480.0 Vec2.new Shader.setSize

  gsb SpriteBatch.init

  # start game loop

  gt 0.0 =
  gdt 0.03 =

  gcurrentTime getTimeFloat =
  gaccumulator 0.0 =

  gcurrState shd@ GameState.init =
  gprevState gcurrState@ =

  "init" printline

  # 3089 glEnable

  (loop) emscripten_set_main_loop

  # gsb SpriteBatch.deinit
  # gctx@ GFXContext.free

  0
}

def proc loop : void {
  # update
  f32 newTime
  f32 frameTime
  
  newTime getTimeFloat =
  frameTime newTime@ gcurrentTime@ - =

  frameTime@ 0.25 > if {
    frameTime 0.25 =
  }

  gcurrentTime newTime@ =
  gaccumulator gaccumulator@ frameTime@ + =

  # update loop
  gaccumulator@ gdt@ < ! if {
    do {
      gprevState@ GameState.free
      gprevState gcurrState@ GameState.copy =
      gcurrState gt@ gdt@ GameState.update

      gt gt@ gdt@ + =
      gaccumulator gaccumulator@ gdt@ - =

      gaccumulator@ gdt@ < !
    }
  }

  # draw
  GameState state
  f32 alpha

  alpha gaccumulator@ gdt@ / =

  state gprevState gcurrState alpha@ GameState.lerp

  state gsb GameState.draw

  gctx@ GFXContext.clear
  gsb SpriteBatch.finish
  gctx@ GFXContext.swap
  gctx@ GFXContext.poll

  disc
}
