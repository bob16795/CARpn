def proc getTexShaders : ShaderFile$* {
  ShaderFile$* result

  result ShaderFile.SIZE i64' 2 calloc =

  result@[0].contents u8$*$*.SIZE i64' 1 calloc =
  result@[0].kind 35633 =
  result@[0].count 1 =
  result@[0].contents@ u8$**'
  "#version 330 core
layout (location = 0) in vec3 aVertex;
layout (location = 1) in vec2 aTexCoords;
layout (location = 2) in vec4 aColor;
uniform mat4 projection;
out vec2 texCoords;
out vec4 tintColor;
void main()
{
    gl_Position = projection * vec4(aVertex.xyz, 1.0);
    texCoords = aTexCoords;
    tintColor = aColor;
}" =

  result@[1].contents u8$*$*.SIZE i64' 1 calloc =
  result@[1].kind 35632 =
  result@[1].count 1 =
  result@[1].contents@ u8$**'
  "#version 330 core

in vec2 texCoords;
in vec4 tintColor;

out vec4 color;

uniform sampler2D tex;

void main() {
  color = texture(tex, texCoords);
}" =

  result@
}

def proc getPixShaders : ShaderFile$* {
  ShaderFile$* result

  result ShaderFile.SIZE i64' 2 calloc =

  result@[0].contents u8$*$*.SIZE i64' 1 calloc =
  result@[0].kind 35633 =
  result@[0].count 1 =
  result@[0].contents@ u8$**'
  "#version 330 core
layout (location = 0) in vec3 aVertex;
layout (location = 1) in vec2 aTexCoords;
layout (location = 2) in vec4 aColor;
uniform mat4 projection;
out vec2 texCoords;
out vec4 tintColor;
void main()
{
    gl_Position = projection * vec4(aVertex.xyz, 1.0);
    texCoords = aTexCoords;
    tintColor = aColor;
}" =

  result@[1].contents u8$*$*.SIZE i64' 1 calloc =
  result@[1].kind 35632 =
  result@[1].count 1 =
  result@[1].contents@ u8$**'
  "#version 330 core

in vec2 texCoords;
in vec4 tintColor;

out vec4 color;

uniform sampler2D tex;

void main() {
     color = tintColor;
}" =

  result@
}

extern proc getTimeFloat : f32

def proc main : i32 {
  SpriteBatch sb
  GFXContext* ctx
  Shader* [2] shd

  ctx GFXContext.init =
  ctx@ Input.init

  shd [0] getTexShaders 2 Shader.new =
  shd [1] getPixShaders 2 Shader.new =

  shd [0] @ Shader*' 640.0 480.0 Vec2.new Shader.setSize
  shd [1] @ Shader*' 640.0 480.0 Vec2.new Shader.setSize

  sb SpriteBatch.init

  # start game loop

  f32 t
  f32 dt
  f32 currentTime
  f32 accumulator

  t 0.0 =
  dt 0.03 =

  currentTime getTimeFloat =
  accumulator 0.0 =

  GameState currState
  GameState prevState

  currState shd@ GameState.init =
  prevState currState@ =

  3089 glEnable

  do {
    # update
    f32 newTime
    f32 frameTime
    
    newTime getTimeFloat =
    frameTime newTime@ currentTime@ - =

    frameTime@ 0.25 > if {
      frameTime 0.25 =
    }

    currentTime newTime@ =
    accumulator accumulator@ frameTime@ + =

    # update loop
    accumulator@ dt@ < ! if {
      do {
        prevState@ GameState.free
        prevState currState@ GameState.copy =
        currState t@ dt@ GameState.update

        t t@ dt@ + =
        accumulator accumulator@ dt@ - =

        accumulator@ dt@ < !
      }
    }

    # draw
    GameState state
    f32 alpha

    alpha accumulator@ dt@ / =

    state prevState@ currState@ alpha@ GameState.lerp

    state sb GameState.draw

    ctx@ GFXContext.clear
    sb SpriteBatch.finish
    ctx@ GFXContext.swap
    ctx@ GFXContext.poll
  }

  sb SpriteBatch.deinit
  ctx@ GFXContext.free

  0
}
