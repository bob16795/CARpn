struct Vec2 {
  f32 x
  f32 y

  def proc new f32 f32 : Vec2 {
    Vec2 result

    result.y swap =
    result.x swap =

    result @
  }

  def proc mul Vec2 f32 : Vec2 {
    Vec2 result

    covr.x covr * result.x swap =
    covr.y covr * result.y swap =
    disc disc

    result @
  }

  def proc add Vec2 Vec2 : Vec2 {
    Vec2 result

    covr.x covr.x + result.x swap =
    covr.y covr.y + result.y swap =
    disc disc

    result @
  }

  def proc lerp Vec2 Vec2 f32 : Vec2 {
    f32 pc

    pc swap =

    pc@ Vec2.mul swap 1.0 pc@ - Vec2.mul Vec2.add
  }
}

struct Rect {
  f32 x
  f32 y
  f32 w
  f32 h

  def proc new f32 f32 f32 f32 : Rect {
    Rect result

    result.h swap =
    result.w swap =
    result.y swap =
    result.x swap =

    result@
  }

  def proc location Rect : Vec2 {
    Vec2 result

    result.x covr.x =
    result.y covr.y =
    disc

    result@
  }
}

extern proc sqrt f32 : f32

struct Vec3 {
  f32 x
  f32 y
  f32 z

  def proc sub Vec3 Vec3 : Vec3 {
    Vec3 result

    covr.x covr.x - result.x swap =
    covr.y covr.y - result.y swap =
    covr.z covr.z - result.z swap =
    disc disc

    result @
  }

  def proc dot Vec3 Vec3 : f32 {
    f32 result

    result 0.0 =

    covr.x covr.x * result@ + result swap =
    covr.y covr.y * result@ + result swap =
    covr.z covr.z * result@ + result swap =
    disc disc

    result@
  }

  def proc cross Vec3 Vec3 : Vec3 {
    Vec3 result
    Vec3 a
    Vec3 b

    a swap =
    b swap =

    result.x a@.y a@.z * b@.z b@.y * - =
    result.y a@.z a@.x * b@.x b@.z * - =
    result.z a@.x a@.y * b@.y b@.x * - =

    result@
  }

  def proc mag Vec3 : f32 {
    copy Vec3.dot sqrt
  }

  def proc normalize Vec3 : Vec3 {
    f32 m
    Vec3 result

    result swap o=

    m result @ Vec3.mag =

    result.x result.x@ m@ / =
    result.y result.y@ m@ / =
    result.z result.z@ m@ / =

    result @
  }
}

struct IVec2 {
  i32 x
  i32 y
}

struct IVec3 {
  i32 x
  i32 y
}

struct Mat4 {
  f32 [4] [4] data

  def proc lookAt Vec3 Vec3 Vec3 : Mat4 {
    Mat4 result
    Vec3 up 
    Vec3 center 
    Vec3 eye

    up swap =
    center swap =
    eye swap =

    Vec3 f
    Vec3 s
    Vec3 u

    f center@ eye@ Vec3.sub Vec3.normalize =
    s f@ up@ Vec3.cross Vec3.normalize =
    u s@ f@ Vec3.cross =

    result.data [0] [0] s.x@ =
    result.data [0] [1] s.y@ =
    result.data [0] [2] s.z@ =
    result.data [0] [3] 0.0 =

    result.data [1] [0] u.x@ =
    result.data [1] [1] u.y@ =
    result.data [1] [2] u.z@ =
    result.data [1] [3] 0.0 =

    result.data [2] [0] f.x@ =
    result.data [2] [1] f.y@ =
    result.data [2] [2] f.z@ =
    result.data [2] [3] 0.0 =

    result.data [3] [0] s@ eye@ Vec3.dot -1.0 * =
    result.data [3] [0] u@ eye@ Vec3.dot -1.0 * =
    result.data [3] [0] f@ eye@ Vec3.dot =
    result.data [3] [3] 1.0 =

    result @
  }

  def proc ortho f32 f32 f32 f32 f32 f32 : Mat4 {
    Mat4 result

    => f
    => n
    => t
    => b
    => r
    => l

    result.data [0] [0] 2.0 r l - / =
    result.data [0] [1] 0.0 =
    result.data [0] [2] 0.0 =
    result.data [0] [3] 0.0 =

    result.data [1] [0] 0.0 =
    result.data [1] [1] 2.0 t b - / =
    result.data [1] [2] 0.0 =
    result.data [1] [3] 0.0 =

    result.data [2] [0] 0.0 =
    result.data [2] [1] 0.0 =
    result.data [2] [2] -2.0 f n - / =
    result.data [2] [3] 0.0 =

    result.data [3] [0] r l + -1.0 * r l - / =
    result.data [3] [1] t b + -1.0 * t b - / =
    result.data [3] [2] f n + -1.0 * f n - / =
    result.data [3] [3] 1.0 =

    result @
  }
}
