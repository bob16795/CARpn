struct ShaderFile {
  u8$*$* contents
  u32 count
  u32 kind
}

struct Shader {
  u32 id

  def proc new ShaderFile$* u32 : Shader* {
    Shader* result
    ShaderFile$* files
    u32 count

    count swap =
    files swap =

    result Shader.SIZE i32' malloc =
    result@.id glCreateProgram =

    count @ 0 == if { null ret }

    do {
      count count @ 1 - =
      u32 shader
      shader files@ count@ $ .kind@ glCreateShader =
      shader@ files@ count@ $ .count@ files@ count@ $ .contents@ null glShaderSource
      shader@ glCompileShader

      result@.id@ shader@ glAttachShader

      count @ 0 >
    }

    result@.id@ glLinkProgram

    result @
  }

  def proc setSize Shader* Vec2 : void {
    # TODO append shader
    Mat4 proj

    Vec2 size
    Shader* shd

    size swap =
    shd swap =

    proj 0.0 size@.x f32' size@.y f32' 0.0 100.0 -1.0 Mat4.ortho =

    shd@.id@ glUseProgram

    shd@.id@ "projection" glGetUniformLocation
    1 0 proj.data
    glUniformMatrix4fv
  }
}
